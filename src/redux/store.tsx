
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Peragon Games ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/store.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: 
*/

import { Middleware, combineReducers, configureStore } from "@reduxjs/toolkit";


// IMPORTant

import { LoginService } from './services/LoginService';

import { LogoutService } from './services/LogoutService';

export const getQueries = (state) => state.queries;
export const getEntities = (state) => state.entities;

const reducer = combineReducers({
  [LoginService.reducerPath]: LoginService.reducer,
  [LogoutService.reducerPath]: LogoutService.reducer
});

export const store = configureStore({
  reducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware()

    .concat(LoginService.middleware as Middleware)
    .concat(LogoutService.middleware as Middleware)
});

// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization
// setupListeners(store.dispatch)

export default store;

// Get the type of our store variable
export type AppStore = typeof store;

// Infer the `RootState` and `AppDispatch` types from the store itself
export type RootState = ReturnType<AppStore["getState"]>;

// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}
export type AppDispatch = AppStore["dispatch"];
