// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasOpenAPISpecApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasOpenAPISpec,
    OasOpenAPISpecFromJSON,
    OasOpenAPISpecToJSON,
} from '../model';

export interface DeleteOasOpenAPISpecRequest {
    id: string;
}

export interface GetOasOpenAPISpecRequest {
    id: string;
}

export interface PostOasOpenAPISpecRequest {
    oasOpenAPISpec: OasOpenAPISpec;
}

export interface UpdateOasOpenAPISpecRequest {
    id: string;
    oasOpenAPISpec: OasOpenAPISpec;
}


/**
 * Deletes a specific OasOpenAPISpec.
 * Delete a OasOpenAPISpec.
 */
function deleteOasOpenAPISpecRaw<T>(requestParameters: DeleteOasOpenAPISpecRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasOpenAPISpec.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOpenAPISpec/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasOpenAPISpec.
* Delete a OasOpenAPISpec.
*/
export function deleteOasOpenAPISpec<T>(requestParameters: DeleteOasOpenAPISpecRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasOpenAPISpecRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasOpenAPISpec for a specific uid.
 * Retrieve a single OasOpenAPISpec
 */
function getOasOpenAPISpecRaw<T>(requestParameters: GetOasOpenAPISpecRequest, requestConfig: runtime.TypedQueryConfig<T, OasOpenAPISpec> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasOpenAPISpec.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOpenAPISpec/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasOpenAPISpecFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasOpenAPISpec for a specific uid.
* Retrieve a single OasOpenAPISpec
*/
export function getOasOpenAPISpec<T>(requestParameters: GetOasOpenAPISpecRequest, requestConfig?: runtime.TypedQueryConfig<T, OasOpenAPISpec>): QueryConfig<T> {
    return getOasOpenAPISpecRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasOpenAPISpecs.
 * Retrieve a list of OasOpenAPISpecs
 */
function getOasOpenAPISpecListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<OasOpenAPISpec>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOpenAPISpec`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasOpenAPISpecFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasOpenAPISpecs.
* Retrieve a list of OasOpenAPISpecs
*/
export function getOasOpenAPISpecList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<OasOpenAPISpec>>): QueryConfig<T> {
    return getOasOpenAPISpecListRaw( requestConfig);
}

/**
 * Creates a new OasOpenAPISpec.
 * Create a new OasOpenAPISpec
 */
function postOasOpenAPISpecRaw<T>(requestParameters: PostOasOpenAPISpecRequest, requestConfig: runtime.TypedQueryConfig<T, OasOpenAPISpec> = {}): QueryConfig<T> {
    if (requestParameters.oasOpenAPISpec === null || requestParameters.oasOpenAPISpec === undefined) {
        throw new runtime.RequiredError('oasOpenAPISpec','Required parameter requestParameters.oasOpenAPISpec was null or undefined when calling postOasOpenAPISpec.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOpenAPISpec`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasOpenAPISpecToJSON(requestParameters.oasOpenAPISpec),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasOpenAPISpecFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasOpenAPISpec.
* Create a new OasOpenAPISpec
*/
export function postOasOpenAPISpec<T>(requestParameters: PostOasOpenAPISpecRequest, requestConfig?: runtime.TypedQueryConfig<T, OasOpenAPISpec>): QueryConfig<T> {
    return postOasOpenAPISpecRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasOpenAPISpec.
 * Update an existing OasOpenAPISpec
 */
function updateOasOpenAPISpecRaw<T>(requestParameters: UpdateOasOpenAPISpecRequest, requestConfig: runtime.TypedQueryConfig<T, OasOpenAPISpec> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasOpenAPISpec.');
    }

    if (requestParameters.oasOpenAPISpec === null || requestParameters.oasOpenAPISpec === undefined) {
        throw new runtime.RequiredError('oasOpenAPISpec','Required parameter requestParameters.oasOpenAPISpec was null or undefined when calling updateOasOpenAPISpec.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOpenAPISpec/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasOpenAPISpecToJSON(requestParameters.oasOpenAPISpec),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasOpenAPISpecFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasOpenAPISpec.
* Update an existing OasOpenAPISpec
*/
export function updateOasOpenAPISpec<T>(requestParameters: UpdateOasOpenAPISpecRequest, requestConfig?: runtime.TypedQueryConfig<T, OasOpenAPISpec>): QueryConfig<T> {
    return updateOasOpenAPISpecRaw(requestParameters, requestConfig);
}

