// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: NoteApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Note,
    NoteFromJSON,
    NoteToJSON,
} from '../model';

export interface DeleteNoteRequest {
    id: string;
}

export interface GetNoteRequest {
    id: string;
}

export interface PostNoteRequest {
    note: Note;
}

export interface UpdateNoteRequest {
    id: string;
    note: Note;
}


/**
 * Deletes a specific Note.
 * Delete a Note.
 */
function deleteNoteRaw<T>(requestParameters: DeleteNoteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNote.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Note.
* Delete a Note.
*/
export function deleteNote<T>(requestParameters: DeleteNoteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteNoteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Note for a specific uid.
 * Retrieve a single Note
 */
function getNoteRaw<T>(requestParameters: GetNoteRequest, requestConfig: runtime.TypedQueryConfig<T, Note> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNote.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NoteFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Note for a specific uid.
* Retrieve a single Note
*/
export function getNote<T>(requestParameters: GetNoteRequest, requestConfig?: runtime.TypedQueryConfig<T, Note>): QueryConfig<T> {
    return getNoteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Notes.
 * Retrieve a list of Notes
 */
function getNoteListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Note>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Note`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(NoteFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Notes.
* Retrieve a list of Notes
*/
export function getNoteList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Note>>): QueryConfig<T> {
    return getNoteListRaw( requestConfig);
}

/**
 * Creates a new Note.
 * Create a new Note
 */
function postNoteRaw<T>(requestParameters: PostNoteRequest, requestConfig: runtime.TypedQueryConfig<T, Note> = {}): QueryConfig<T> {
    if (requestParameters.note === null || requestParameters.note === undefined) {
        throw new runtime.RequiredError('note','Required parameter requestParameters.note was null or undefined when calling postNote.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Note`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || NoteToJSON(requestParameters.note),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NoteFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Note.
* Create a new Note
*/
export function postNote<T>(requestParameters: PostNoteRequest, requestConfig?: runtime.TypedQueryConfig<T, Note>): QueryConfig<T> {
    return postNoteRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Note.
 * Update an existing Note
 */
function updateNoteRaw<T>(requestParameters: UpdateNoteRequest, requestConfig: runtime.TypedQueryConfig<T, Note> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNote.');
    }

    if (requestParameters.note === null || requestParameters.note === undefined) {
        throw new runtime.RequiredError('note','Required parameter requestParameters.note was null or undefined when calling updateNote.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || NoteToJSON(requestParameters.note),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NoteFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Note.
* Update an existing Note
*/
export function updateNote<T>(requestParameters: UpdateNoteRequest, requestConfig?: runtime.TypedQueryConfig<T, Note>): QueryConfig<T> {
    return updateNoteRaw(requestParameters, requestConfig);
}

