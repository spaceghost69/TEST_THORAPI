// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: PtgRefApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    PtgRef,
    PtgRefFromJSON,
    PtgRefToJSON,
} from '../model';

export interface DeletePtgRefRequest {
    id: string;
}

export interface GetPtgRefRequest {
    id: string;
}

export interface PostPtgRefRequest {
    ptgRef: PtgRef;
}

export interface UpdatePtgRefRequest {
    id: string;
    ptgRef: PtgRef;
}


/**
 * Deletes a specific PtgRef.
 * Delete a PtgRef.
 */
function deletePtgRefRaw<T>(requestParameters: DeletePtgRefRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePtgRef.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PtgRef/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific PtgRef.
* Delete a PtgRef.
*/
export function deletePtgRef<T>(requestParameters: DeletePtgRefRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deletePtgRefRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single PtgRef for a specific uid.
 * Retrieve a single PtgRef
 */
function getPtgRefRaw<T>(requestParameters: GetPtgRefRequest, requestConfig: runtime.TypedQueryConfig<T, PtgRef> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPtgRef.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PtgRef/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PtgRefFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single PtgRef for a specific uid.
* Retrieve a single PtgRef
*/
export function getPtgRef<T>(requestParameters: GetPtgRefRequest, requestConfig?: runtime.TypedQueryConfig<T, PtgRef>): QueryConfig<T> {
    return getPtgRefRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of PtgRefs.
 * Retrieve a list of PtgRefs
 */
function getPtgRefListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<PtgRef>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PtgRef`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PtgRefFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of PtgRefs.
* Retrieve a list of PtgRefs
*/
export function getPtgRefList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<PtgRef>>): QueryConfig<T> {
    return getPtgRefListRaw( requestConfig);
}

/**
 * Creates a new PtgRef.
 * Create a new PtgRef
 */
function postPtgRefRaw<T>(requestParameters: PostPtgRefRequest, requestConfig: runtime.TypedQueryConfig<T, PtgRef> = {}): QueryConfig<T> {
    if (requestParameters.ptgRef === null || requestParameters.ptgRef === undefined) {
        throw new runtime.RequiredError('ptgRef','Required parameter requestParameters.ptgRef was null or undefined when calling postPtgRef.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PtgRef`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || PtgRefToJSON(requestParameters.ptgRef),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PtgRefFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new PtgRef.
* Create a new PtgRef
*/
export function postPtgRef<T>(requestParameters: PostPtgRefRequest, requestConfig?: runtime.TypedQueryConfig<T, PtgRef>): QueryConfig<T> {
    return postPtgRefRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing PtgRef.
 * Update an existing PtgRef
 */
function updatePtgRefRaw<T>(requestParameters: UpdatePtgRefRequest, requestConfig: runtime.TypedQueryConfig<T, PtgRef> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePtgRef.');
    }

    if (requestParameters.ptgRef === null || requestParameters.ptgRef === undefined) {
        throw new runtime.RequiredError('ptgRef','Required parameter requestParameters.ptgRef was null or undefined when calling updatePtgRef.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PtgRef/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || PtgRefToJSON(requestParameters.ptgRef),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PtgRefFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing PtgRef.
* Update an existing PtgRef
*/
export function updatePtgRef<T>(requestParameters: UpdatePtgRefRequest, requestConfig?: runtime.TypedQueryConfig<T, PtgRef>): QueryConfig<T> {
    return updatePtgRefRaw(requestParameters, requestConfig);
}

