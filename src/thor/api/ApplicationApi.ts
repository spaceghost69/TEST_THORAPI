// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ApplicationApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Application,
    ApplicationFromJSON,
    ApplicationToJSON,
} from '../model';

export interface DeleteApplicationRequest {
    id: string;
}

export interface GetApplicationRequest {
    id: string;
}

export interface PostApplicationRequest {
    application: Application;
}

export interface UpdateApplicationRequest {
    id: string;
    application: Application;
}


/**
 * Deletes a specific Application.
 * Delete a Application.
 */
function deleteApplicationRaw<T>(requestParameters: DeleteApplicationRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApplication.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Application/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Application.
* Delete a Application.
*/
export function deleteApplication<T>(requestParameters: DeleteApplicationRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteApplicationRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Application for a specific uid.
 * Retrieve a single Application
 */
function getApplicationRaw<T>(requestParameters: GetApplicationRequest, requestConfig: runtime.TypedQueryConfig<T, Application> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApplication.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Application/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ApplicationFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Application for a specific uid.
* Retrieve a single Application
*/
export function getApplication<T>(requestParameters: GetApplicationRequest, requestConfig?: runtime.TypedQueryConfig<T, Application>): QueryConfig<T> {
    return getApplicationRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Applications.
 * Retrieve a list of Applications
 */
function getApplicationListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Application>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Application`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ApplicationFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Applications.
* Retrieve a list of Applications
*/
export function getApplicationList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Application>>): QueryConfig<T> {
    return getApplicationListRaw( requestConfig);
}

/**
 * Creates a new Application.
 * Create a new Application
 */
function postApplicationRaw<T>(requestParameters: PostApplicationRequest, requestConfig: runtime.TypedQueryConfig<T, Application> = {}): QueryConfig<T> {
    if (requestParameters.application === null || requestParameters.application === undefined) {
        throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling postApplication.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Application`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ApplicationToJSON(requestParameters.application),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ApplicationFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Application.
* Create a new Application
*/
export function postApplication<T>(requestParameters: PostApplicationRequest, requestConfig?: runtime.TypedQueryConfig<T, Application>): QueryConfig<T> {
    return postApplicationRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Application.
 * Update an existing Application
 */
function updateApplicationRaw<T>(requestParameters: UpdateApplicationRequest, requestConfig: runtime.TypedQueryConfig<T, Application> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateApplication.');
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
        throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateApplication.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Application/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ApplicationToJSON(requestParameters.application),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ApplicationFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Application.
* Update an existing Application
*/
export function updateApplication<T>(requestParameters: UpdateApplicationRequest, requestConfig?: runtime.TypedQueryConfig<T, Application>): QueryConfig<T> {
    return updateApplicationRaw(requestParameters, requestConfig);
}

