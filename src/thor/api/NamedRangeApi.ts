// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: NamedRangeApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    NamedRange,
    NamedRangeFromJSON,
    NamedRangeToJSON,
} from '../model';

export interface DeleteNamedRangeRequest {
    id: string;
}

export interface GetNamedRangeRequest {
    id: string;
}

export interface PostNamedRangeRequest {
    namedRange: NamedRange;
}

export interface UpdateNamedRangeRequest {
    id: string;
    namedRange: NamedRange;
}


/**
 * Deletes a specific NamedRange.
 * Delete a NamedRange.
 */
function deleteNamedRangeRaw<T>(requestParameters: DeleteNamedRangeRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNamedRange.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/NamedRange/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific NamedRange.
* Delete a NamedRange.
*/
export function deleteNamedRange<T>(requestParameters: DeleteNamedRangeRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteNamedRangeRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single NamedRange for a specific uid.
 * Retrieve a single NamedRange
 */
function getNamedRangeRaw<T>(requestParameters: GetNamedRangeRequest, requestConfig: runtime.TypedQueryConfig<T, NamedRange> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNamedRange.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/NamedRange/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NamedRangeFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single NamedRange for a specific uid.
* Retrieve a single NamedRange
*/
export function getNamedRange<T>(requestParameters: GetNamedRangeRequest, requestConfig?: runtime.TypedQueryConfig<T, NamedRange>): QueryConfig<T> {
    return getNamedRangeRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of NamedRanges.
 * Retrieve a list of NamedRanges
 */
function getNamedRangeListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<NamedRange>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/NamedRange`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(NamedRangeFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of NamedRanges.
* Retrieve a list of NamedRanges
*/
export function getNamedRangeList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<NamedRange>>): QueryConfig<T> {
    return getNamedRangeListRaw( requestConfig);
}

/**
 * Creates a new NamedRange.
 * Create a new NamedRange
 */
function postNamedRangeRaw<T>(requestParameters: PostNamedRangeRequest, requestConfig: runtime.TypedQueryConfig<T, NamedRange> = {}): QueryConfig<T> {
    if (requestParameters.namedRange === null || requestParameters.namedRange === undefined) {
        throw new runtime.RequiredError('namedRange','Required parameter requestParameters.namedRange was null or undefined when calling postNamedRange.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/NamedRange`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || NamedRangeToJSON(requestParameters.namedRange),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NamedRangeFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new NamedRange.
* Create a new NamedRange
*/
export function postNamedRange<T>(requestParameters: PostNamedRangeRequest, requestConfig?: runtime.TypedQueryConfig<T, NamedRange>): QueryConfig<T> {
    return postNamedRangeRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing NamedRange.
 * Update an existing NamedRange
 */
function updateNamedRangeRaw<T>(requestParameters: UpdateNamedRangeRequest, requestConfig: runtime.TypedQueryConfig<T, NamedRange> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNamedRange.');
    }

    if (requestParameters.namedRange === null || requestParameters.namedRange === undefined) {
        throw new runtime.RequiredError('namedRange','Required parameter requestParameters.namedRange was null or undefined when calling updateNamedRange.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/NamedRange/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || NamedRangeToJSON(requestParameters.namedRange),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NamedRangeFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing NamedRange.
* Update an existing NamedRange
*/
export function updateNamedRange<T>(requestParameters: UpdateNamedRangeRequest, requestConfig?: runtime.TypedQueryConfig<T, NamedRange>): QueryConfig<T> {
    return updateNamedRangeRaw(requestParameters, requestConfig);
}

