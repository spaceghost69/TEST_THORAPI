// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasComponentsApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasComponents,
    OasComponentsFromJSON,
    OasComponentsToJSON,
} from '../model';

export interface DeleteOasComponentsRequest {
    id: string;
}

export interface GetOasComponentsRequest {
    id: string;
}

export interface PostOasComponentsRequest {
    oasComponents: OasComponents;
}

export interface UpdateOasComponentsRequest {
    id: string;
    oasComponents: OasComponents;
}


/**
 * Deletes a specific OasComponents.
 * Delete a OasComponents.
 */
function deleteOasComponentsRaw<T>(requestParameters: DeleteOasComponentsRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasComponents.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasComponents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasComponents.
* Delete a OasComponents.
*/
export function deleteOasComponents<T>(requestParameters: DeleteOasComponentsRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasComponentsRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasComponents for a specific uid.
 * Retrieve a single OasComponents
 */
function getOasComponentsRaw<T>(requestParameters: GetOasComponentsRequest, requestConfig: runtime.TypedQueryConfig<T, OasComponents> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasComponents.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasComponents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasComponentsFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasComponents for a specific uid.
* Retrieve a single OasComponents
*/
export function getOasComponents<T>(requestParameters: GetOasComponentsRequest, requestConfig?: runtime.TypedQueryConfig<T, OasComponents>): QueryConfig<T> {
    return getOasComponentsRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasComponentss.
 * Retrieve a list of OasComponentss
 */
function getOasComponentsListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<OasComponents>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasComponents`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasComponentsFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasComponentss.
* Retrieve a list of OasComponentss
*/
export function getOasComponentsList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<OasComponents>>): QueryConfig<T> {
    return getOasComponentsListRaw( requestConfig);
}

/**
 * Creates a new OasComponents.
 * Create a new OasComponents
 */
function postOasComponentsRaw<T>(requestParameters: PostOasComponentsRequest, requestConfig: runtime.TypedQueryConfig<T, OasComponents> = {}): QueryConfig<T> {
    if (requestParameters.oasComponents === null || requestParameters.oasComponents === undefined) {
        throw new runtime.RequiredError('oasComponents','Required parameter requestParameters.oasComponents was null or undefined when calling postOasComponents.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasComponents`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasComponentsToJSON(requestParameters.oasComponents),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasComponentsFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasComponents.
* Create a new OasComponents
*/
export function postOasComponents<T>(requestParameters: PostOasComponentsRequest, requestConfig?: runtime.TypedQueryConfig<T, OasComponents>): QueryConfig<T> {
    return postOasComponentsRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasComponents.
 * Update an existing OasComponents
 */
function updateOasComponentsRaw<T>(requestParameters: UpdateOasComponentsRequest, requestConfig: runtime.TypedQueryConfig<T, OasComponents> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasComponents.');
    }

    if (requestParameters.oasComponents === null || requestParameters.oasComponents === undefined) {
        throw new runtime.RequiredError('oasComponents','Required parameter requestParameters.oasComponents was null or undefined when calling updateOasComponents.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasComponents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasComponentsToJSON(requestParameters.oasComponents),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasComponentsFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasComponents.
* Update an existing OasComponents
*/
export function updateOasComponents<T>(requestParameters: UpdateOasComponentsRequest, requestConfig?: runtime.TypedQueryConfig<T, OasComponents>): QueryConfig<T> {
    return updateOasComponentsRaw(requestParameters, requestConfig);
}

