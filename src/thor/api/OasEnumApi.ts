// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasEnumApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasEnum,
    OasEnumFromJSON,
    OasEnumToJSON,
} from '../model';

export interface DeleteOasEnumRequest {
    id: string;
}

export interface GetOasEnumRequest {
    id: string;
}

export interface PostOasEnumRequest {
    oasEnum: OasEnum;
}

export interface UpdateOasEnumRequest {
    id: string;
    oasEnum: OasEnum;
}


/**
 * Deletes a specific OasEnum.
 * Delete a OasEnum.
 */
function deleteOasEnumRaw<T>(requestParameters: DeleteOasEnumRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasEnum.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasEnum/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasEnum.
* Delete a OasEnum.
*/
export function deleteOasEnum<T>(requestParameters: DeleteOasEnumRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasEnumRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasEnum for a specific uid.
 * Retrieve a single OasEnum
 */
function getOasEnumRaw<T>(requestParameters: GetOasEnumRequest, requestConfig: runtime.TypedQueryConfig<T, OasEnum> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasEnum.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasEnum/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasEnumFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasEnum for a specific uid.
* Retrieve a single OasEnum
*/
export function getOasEnum<T>(requestParameters: GetOasEnumRequest, requestConfig?: runtime.TypedQueryConfig<T, OasEnum>): QueryConfig<T> {
    return getOasEnumRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasEnums.
 * Retrieve a list of OasEnums
 */
function getOasEnumListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<OasEnum>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasEnum`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasEnumFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasEnums.
* Retrieve a list of OasEnums
*/
export function getOasEnumList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<OasEnum>>): QueryConfig<T> {
    return getOasEnumListRaw( requestConfig);
}

/**
 * Creates a new OasEnum.
 * Create a new OasEnum
 */
function postOasEnumRaw<T>(requestParameters: PostOasEnumRequest, requestConfig: runtime.TypedQueryConfig<T, OasEnum> = {}): QueryConfig<T> {
    if (requestParameters.oasEnum === null || requestParameters.oasEnum === undefined) {
        throw new runtime.RequiredError('oasEnum','Required parameter requestParameters.oasEnum was null or undefined when calling postOasEnum.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasEnum`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasEnumToJSON(requestParameters.oasEnum),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasEnumFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasEnum.
* Create a new OasEnum
*/
export function postOasEnum<T>(requestParameters: PostOasEnumRequest, requestConfig?: runtime.TypedQueryConfig<T, OasEnum>): QueryConfig<T> {
    return postOasEnumRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasEnum.
 * Update an existing OasEnum
 */
function updateOasEnumRaw<T>(requestParameters: UpdateOasEnumRequest, requestConfig: runtime.TypedQueryConfig<T, OasEnum> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasEnum.');
    }

    if (requestParameters.oasEnum === null || requestParameters.oasEnum === undefined) {
        throw new runtime.RequiredError('oasEnum','Required parameter requestParameters.oasEnum was null or undefined when calling updateOasEnum.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasEnum/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasEnumToJSON(requestParameters.oasEnum),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasEnumFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasEnum.
* Update an existing OasEnum
*/
export function updateOasEnum<T>(requestParameters: UpdateOasEnumRequest, requestConfig?: runtime.TypedQueryConfig<T, OasEnum>): QueryConfig<T> {
    return updateOasEnumRaw(requestParameters, requestConfig);
}

