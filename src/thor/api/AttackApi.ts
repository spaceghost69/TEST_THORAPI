// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: AttackApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Attack,
    AttackFromJSON,
    AttackToJSON,
} from '../model';

export interface DeleteAttackRequest {
    id: string;
}

export interface GetAttackRequest {
    id: string;
}

export interface PostAttackRequest {
    attack: Attack;
}

export interface UpdateAttackRequest {
    id: string;
    attack: Attack;
}


/**
 * Deletes a specific Attack.
 * Delete a Attack.
 */
function deleteAttackRaw<T>(requestParameters: DeleteAttackRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAttack.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Attack/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Attack.
* Delete a Attack.
*/
export function deleteAttack<T>(requestParameters: DeleteAttackRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteAttackRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Attack for a specific uid.
 * Retrieve a single Attack
 */
function getAttackRaw<T>(requestParameters: GetAttackRequest, requestConfig: runtime.TypedQueryConfig<T, Attack> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAttack.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Attack/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AttackFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Attack for a specific uid.
* Retrieve a single Attack
*/
export function getAttack<T>(requestParameters: GetAttackRequest, requestConfig?: runtime.TypedQueryConfig<T, Attack>): QueryConfig<T> {
    return getAttackRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Attacks.
 * Retrieve a list of Attacks
 */
function getAttackListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Attack>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Attack`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(AttackFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Attacks.
* Retrieve a list of Attacks
*/
export function getAttackList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Attack>>): QueryConfig<T> {
    return getAttackListRaw( requestConfig);
}

/**
 * Creates a new Attack.
 * Create a new Attack
 */
function postAttackRaw<T>(requestParameters: PostAttackRequest, requestConfig: runtime.TypedQueryConfig<T, Attack> = {}): QueryConfig<T> {
    if (requestParameters.attack === null || requestParameters.attack === undefined) {
        throw new runtime.RequiredError('attack','Required parameter requestParameters.attack was null or undefined when calling postAttack.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Attack`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AttackToJSON(requestParameters.attack),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AttackFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Attack.
* Create a new Attack
*/
export function postAttack<T>(requestParameters: PostAttackRequest, requestConfig?: runtime.TypedQueryConfig<T, Attack>): QueryConfig<T> {
    return postAttackRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Attack.
 * Update an existing Attack
 */
function updateAttackRaw<T>(requestParameters: UpdateAttackRequest, requestConfig: runtime.TypedQueryConfig<T, Attack> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAttack.');
    }

    if (requestParameters.attack === null || requestParameters.attack === undefined) {
        throw new runtime.RequiredError('attack','Required parameter requestParameters.attack was null or undefined when calling updateAttack.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Attack/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || AttackToJSON(requestParameters.attack),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AttackFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Attack.
* Update an existing Attack
*/
export function updateAttack<T>(requestParameters: UpdateAttackRequest, requestConfig?: runtime.TypedQueryConfig<T, Attack>): QueryConfig<T> {
    return updateAttackRaw(requestParameters, requestConfig);
}

