// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Peragon Games ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: PivotTableApi
*/

import { QueryConfig, ResponseBody } from 'redux-query';
import {
    PivotTable,
    PivotTableFromJSON,
    PivotTableToJSON,
} from '../model';
import * as runtime from '../src/runtime';

export interface DeletePivotTableRequest {
    id: string;
}

export interface GetPivotTableRequest {
    id: string;
}

export interface PostPivotTableRequest {
    pivotTable: PivotTable;
}

export interface UpdatePivotTableRequest {
    id: string;
    pivotTable: PivotTable;
}


/**
 * Deletes a specific PivotTable.
 * Delete a PivotTable.
 */
function deletePivotTableRaw<T>(requestParameters: DeletePivotTableRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePivotTable.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PivotTable/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific PivotTable.
* Delete a PivotTable.
*/
export function deletePivotTable<T>(requestParameters: DeletePivotTableRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deletePivotTableRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single PivotTable for a specific uid.
 * Retrieve a single PivotTable
 */
function getPivotTableRaw<T>(requestParameters: GetPivotTableRequest, requestConfig: runtime.TypedQueryConfig<T, PivotTable> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPivotTable.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PivotTable/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PivotTableFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single PivotTable for a specific uid.
* Retrieve a single PivotTable
*/
export function getPivotTable<T>(requestParameters: GetPivotTableRequest, requestConfig?: runtime.TypedQueryConfig<T, PivotTable>): QueryConfig<T> {
    return getPivotTableRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of PivotTables.
 * Retrieve a list of PivotTables
 */
function getPivotTableListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<PivotTable>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PivotTable`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PivotTableFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of PivotTables.
* Retrieve a list of PivotTables
*/
export function getPivotTableList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<PivotTable>>): QueryConfig<T> {
    return getPivotTableListRaw( requestConfig);
}

/**
 * Creates a new PivotTable.
 * Create a new PivotTable
 */
function postPivotTableRaw<T>(requestParameters: PostPivotTableRequest, requestConfig: runtime.TypedQueryConfig<T, PivotTable> = {}): QueryConfig<T> {
    if (requestParameters.pivotTable === null || requestParameters.pivotTable === undefined) {
        throw new runtime.RequiredError('pivotTable','Required parameter requestParameters.pivotTable was null or undefined when calling postPivotTable.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PivotTable`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || PivotTableToJSON(requestParameters.pivotTable),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PivotTableFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new PivotTable.
* Create a new PivotTable
*/
export function postPivotTable<T>(requestParameters: PostPivotTableRequest, requestConfig?: runtime.TypedQueryConfig<T, PivotTable>): QueryConfig<T> {
    return postPivotTableRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing PivotTable.
 * Update an existing PivotTable
 */
function updatePivotTableRaw<T>(requestParameters: UpdatePivotTableRequest, requestConfig: runtime.TypedQueryConfig<T, PivotTable> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePivotTable.');
    }

    if (requestParameters.pivotTable === null || requestParameters.pivotTable === undefined) {
        throw new runtime.RequiredError('pivotTable','Required parameter requestParameters.pivotTable was null or undefined when calling updatePivotTable.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/PivotTable/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || PivotTableToJSON(requestParameters.pivotTable),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PivotTableFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing PivotTable.
* Update an existing PivotTable
*/
export function updatePivotTable<T>(requestParameters: UpdatePivotTableRequest, requestConfig?: runtime.TypedQueryConfig<T, PivotTable>): QueryConfig<T> {
    return updatePivotTableRaw(requestParameters, requestConfig);
}

