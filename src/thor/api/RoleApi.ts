// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: RoleApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Role,
    RoleFromJSON,
    RoleToJSON,
} from '../model';

export interface DeleteRoleRequest {
    id: string;
}

export interface GetRoleRequest {
    id: string;
}

export interface PostRoleRequest {
    role: Role;
}

export interface UpdateRoleRequest {
    id: string;
    role: Role;
}


/**
 * Deletes a specific Role.
 * Delete a Role.
 */
function deleteRoleRaw<T>(requestParameters: DeleteRoleRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRole.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Role.
* Delete a Role.
*/
export function deleteRole<T>(requestParameters: DeleteRoleRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteRoleRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Role for a specific uid.
 * Retrieve a single Role
 */
function getRoleRaw<T>(requestParameters: GetRoleRequest, requestConfig: runtime.TypedQueryConfig<T, Role> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRole.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RoleFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Role for a specific uid.
* Retrieve a single Role
*/
export function getRole<T>(requestParameters: GetRoleRequest, requestConfig?: runtime.TypedQueryConfig<T, Role>): QueryConfig<T> {
    return getRoleRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Roles.
 * Retrieve a list of Roles
 */
function getRoleListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Role>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Role`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(RoleFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Roles.
* Retrieve a list of Roles
*/
export function getRoleList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Role>>): QueryConfig<T> {
    return getRoleListRaw( requestConfig);
}

/**
 * Creates a new Role.
 * Create a new Role
 */
function postRoleRaw<T>(requestParameters: PostRoleRequest, requestConfig: runtime.TypedQueryConfig<T, Role> = {}): QueryConfig<T> {
    if (requestParameters.role === null || requestParameters.role === undefined) {
        throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling postRole.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Role`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || RoleToJSON(requestParameters.role),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RoleFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Role.
* Create a new Role
*/
export function postRole<T>(requestParameters: PostRoleRequest, requestConfig?: runtime.TypedQueryConfig<T, Role>): QueryConfig<T> {
    return postRoleRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Role.
 * Update an existing Role
 */
function updateRoleRaw<T>(requestParameters: UpdateRoleRequest, requestConfig: runtime.TypedQueryConfig<T, Role> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRole.');
    }

    if (requestParameters.role === null || requestParameters.role === undefined) {
        throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateRole.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || RoleToJSON(requestParameters.role),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RoleFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Role.
* Update an existing Role
*/
export function updateRole<T>(requestParameters: UpdateRoleRequest, requestConfig?: runtime.TypedQueryConfig<T, Role>): QueryConfig<T> {
    return updateRoleRaw(requestParameters, requestConfig);
}

