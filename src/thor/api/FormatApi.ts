// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: FormatApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Format,
    FormatFromJSON,
    FormatToJSON,
} from '../model';

export interface DeleteFormatRequest {
    id: string;
}

export interface GetFormatRequest {
    id: string;
}

export interface PostFormatRequest {
    format: Format;
}

export interface UpdateFormatRequest {
    id: string;
    format: Format;
}


/**
 * Deletes a specific Format.
 * Delete a Format.
 */
function deleteFormatRaw<T>(requestParameters: DeleteFormatRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFormat.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Format/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Format.
* Delete a Format.
*/
export function deleteFormat<T>(requestParameters: DeleteFormatRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteFormatRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Format for a specific uid.
 * Retrieve a single Format
 */
function getFormatRaw<T>(requestParameters: GetFormatRequest, requestConfig: runtime.TypedQueryConfig<T, Format> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFormat.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Format/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormatFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Format for a specific uid.
* Retrieve a single Format
*/
export function getFormat<T>(requestParameters: GetFormatRequest, requestConfig?: runtime.TypedQueryConfig<T, Format>): QueryConfig<T> {
    return getFormatRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Formats.
 * Retrieve a list of Formats
 */
function getFormatListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Format>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Format`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FormatFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Formats.
* Retrieve a list of Formats
*/
export function getFormatList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Format>>): QueryConfig<T> {
    return getFormatListRaw( requestConfig);
}

/**
 * Creates a new Format.
 * Create a new Format
 */
function postFormatRaw<T>(requestParameters: PostFormatRequest, requestConfig: runtime.TypedQueryConfig<T, Format> = {}): QueryConfig<T> {
    if (requestParameters.format === null || requestParameters.format === undefined) {
        throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling postFormat.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Format`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || FormatToJSON(requestParameters.format),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormatFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Format.
* Create a new Format
*/
export function postFormat<T>(requestParameters: PostFormatRequest, requestConfig?: runtime.TypedQueryConfig<T, Format>): QueryConfig<T> {
    return postFormatRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Format.
 * Update an existing Format
 */
function updateFormatRaw<T>(requestParameters: UpdateFormatRequest, requestConfig: runtime.TypedQueryConfig<T, Format> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFormat.');
    }

    if (requestParameters.format === null || requestParameters.format === undefined) {
        throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling updateFormat.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Format/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || FormatToJSON(requestParameters.format),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormatFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Format.
* Update an existing Format
*/
export function updateFormat<T>(requestParameters: UpdateFormatRequest, requestConfig?: runtime.TypedQueryConfig<T, Format>): QueryConfig<T> {
    return updateFormatRaw(requestParameters, requestConfig);
}

