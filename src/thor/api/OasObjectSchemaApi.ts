// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasObjectSchemaApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasObjectSchema,
    OasObjectSchemaFromJSON,
    OasObjectSchemaToJSON,
} from '../model';

export interface DeleteOasObjectSchemaRequest {
    id: string;
}

export interface GetOasObjectSchemaRequest {
    id: string;
}

export interface PostOasObjectSchemaRequest {
    oasObjectSchema: OasObjectSchema;
}

export interface UpdateOasObjectSchemaRequest {
    id: string;
    oasObjectSchema: OasObjectSchema;
}


/**
 * Deletes a specific OasObjectSchema.
 * Delete a OasObjectSchema.
 */
function deleteOasObjectSchemaRaw<T>(requestParameters: DeleteOasObjectSchemaRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasObjectSchema.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasObjectSchema/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasObjectSchema.
* Delete a OasObjectSchema.
*/
export function deleteOasObjectSchema<T>(requestParameters: DeleteOasObjectSchemaRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasObjectSchemaRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasObjectSchema for a specific uid.
 * Retrieve a single OasObjectSchema
 */
function getOasObjectSchemaRaw<T>(requestParameters: GetOasObjectSchemaRequest, requestConfig: runtime.TypedQueryConfig<T, OasObjectSchema> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasObjectSchema.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasObjectSchema/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasObjectSchemaFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasObjectSchema for a specific uid.
* Retrieve a single OasObjectSchema
*/
export function getOasObjectSchema<T>(requestParameters: GetOasObjectSchemaRequest, requestConfig?: runtime.TypedQueryConfig<T, OasObjectSchema>): QueryConfig<T> {
    return getOasObjectSchemaRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasObjectSchemas.
 * Retrieve a list of OasObjectSchemas
 */
function getOasObjectSchemaListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<OasObjectSchema>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasObjectSchema`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasObjectSchemaFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasObjectSchemas.
* Retrieve a list of OasObjectSchemas
*/
export function getOasObjectSchemaList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<OasObjectSchema>>): QueryConfig<T> {
    return getOasObjectSchemaListRaw( requestConfig);
}

/**
 * Creates a new OasObjectSchema.
 * Create a new OasObjectSchema
 */
function postOasObjectSchemaRaw<T>(requestParameters: PostOasObjectSchemaRequest, requestConfig: runtime.TypedQueryConfig<T, OasObjectSchema> = {}): QueryConfig<T> {
    if (requestParameters.oasObjectSchema === null || requestParameters.oasObjectSchema === undefined) {
        throw new runtime.RequiredError('oasObjectSchema','Required parameter requestParameters.oasObjectSchema was null or undefined when calling postOasObjectSchema.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasObjectSchema`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasObjectSchemaToJSON(requestParameters.oasObjectSchema),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasObjectSchemaFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasObjectSchema.
* Create a new OasObjectSchema
*/
export function postOasObjectSchema<T>(requestParameters: PostOasObjectSchemaRequest, requestConfig?: runtime.TypedQueryConfig<T, OasObjectSchema>): QueryConfig<T> {
    return postOasObjectSchemaRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasObjectSchema.
 * Update an existing OasObjectSchema
 */
function updateOasObjectSchemaRaw<T>(requestParameters: UpdateOasObjectSchemaRequest, requestConfig: runtime.TypedQueryConfig<T, OasObjectSchema> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasObjectSchema.');
    }

    if (requestParameters.oasObjectSchema === null || requestParameters.oasObjectSchema === undefined) {
        throw new runtime.RequiredError('oasObjectSchema','Required parameter requestParameters.oasObjectSchema was null or undefined when calling updateOasObjectSchema.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasObjectSchema/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasObjectSchemaToJSON(requestParameters.oasObjectSchema),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasObjectSchemaFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasObjectSchema.
* Update an existing OasObjectSchema
*/
export function updateOasObjectSchema<T>(requestParameters: UpdateOasObjectSchemaRequest, requestConfig?: runtime.TypedQueryConfig<T, OasObjectSchema>): QueryConfig<T> {
    return updateOasObjectSchemaRaw(requestParameters, requestConfig);
}

