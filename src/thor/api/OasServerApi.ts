// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasServerApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasServer,
    OasServerFromJSON,
    OasServerToJSON,
} from '../model';

export interface DeleteOasServerRequest {
    id: string;
}

export interface GetOasServerRequest {
    id: string;
}

export interface PostOasServerRequest {
    oasServer: OasServer;
}

export interface UpdateOasServerRequest {
    id: string;
    oasServer: OasServer;
}


/**
 * Deletes a specific OasServer.
 * Delete a OasServer.
 */
function deleteOasServerRaw<T>(requestParameters: DeleteOasServerRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasServer.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasServer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasServer.
* Delete a OasServer.
*/
export function deleteOasServer<T>(requestParameters: DeleteOasServerRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasServerRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasServer for a specific uid.
 * Retrieve a single OasServer
 */
function getOasServerRaw<T>(requestParameters: GetOasServerRequest, requestConfig: runtime.TypedQueryConfig<T, OasServer> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasServer.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasServer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasServerFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasServer for a specific uid.
* Retrieve a single OasServer
*/
export function getOasServer<T>(requestParameters: GetOasServerRequest, requestConfig?: runtime.TypedQueryConfig<T, OasServer>): QueryConfig<T> {
    return getOasServerRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasServers.
 * Retrieve a list of OasServers
 */
function getOasServerListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<OasServer>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasServer`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasServerFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasServers.
* Retrieve a list of OasServers
*/
export function getOasServerList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<OasServer>>): QueryConfig<T> {
    return getOasServerListRaw( requestConfig);
}

/**
 * Creates a new OasServer.
 * Create a new OasServer
 */
function postOasServerRaw<T>(requestParameters: PostOasServerRequest, requestConfig: runtime.TypedQueryConfig<T, OasServer> = {}): QueryConfig<T> {
    if (requestParameters.oasServer === null || requestParameters.oasServer === undefined) {
        throw new runtime.RequiredError('oasServer','Required parameter requestParameters.oasServer was null or undefined when calling postOasServer.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasServer`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasServerToJSON(requestParameters.oasServer),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasServerFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasServer.
* Create a new OasServer
*/
export function postOasServer<T>(requestParameters: PostOasServerRequest, requestConfig?: runtime.TypedQueryConfig<T, OasServer>): QueryConfig<T> {
    return postOasServerRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasServer.
 * Update an existing OasServer
 */
function updateOasServerRaw<T>(requestParameters: UpdateOasServerRequest, requestConfig: runtime.TypedQueryConfig<T, OasServer> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasServer.');
    }

    if (requestParameters.oasServer === null || requestParameters.oasServer === undefined) {
        throw new runtime.RequiredError('oasServer','Required parameter requestParameters.oasServer was null or undefined when calling updateOasServer.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasServer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasServerToJSON(requestParameters.oasServer),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasServerFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasServer.
* Update an existing OasServer
*/
export function updateOasServer<T>(requestParameters: UpdateOasServerRequest, requestConfig?: runtime.TypedQueryConfig<T, OasServer>): QueryConfig<T> {
    return updateOasServerRaw(requestParameters, requestConfig);
}

