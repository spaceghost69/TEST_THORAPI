// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: BackupConfigApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    BackupConfig,
    BackupConfigFromJSON,
    BackupConfigToJSON,
} from '../model';

export interface DeleteBackupConfigRequest {
    id: string;
}

export interface GetBackupConfigRequest {
    id: string;
}

export interface PostBackupConfigRequest {
    backupConfig: BackupConfig;
}

export interface UpdateBackupConfigRequest {
    id: string;
    backupConfig: BackupConfig;
}


/**
 * Deletes a specific BackupConfig.
 * Delete a BackupConfig.
 */
function deleteBackupConfigRaw<T>(requestParameters: DeleteBackupConfigRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBackupConfig.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BackupConfig/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific BackupConfig.
* Delete a BackupConfig.
*/
export function deleteBackupConfig<T>(requestParameters: DeleteBackupConfigRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteBackupConfigRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single BackupConfig for a specific uid.
 * Retrieve a single BackupConfig
 */
function getBackupConfigRaw<T>(requestParameters: GetBackupConfigRequest, requestConfig: runtime.TypedQueryConfig<T, BackupConfig> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBackupConfig.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BackupConfig/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BackupConfigFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single BackupConfig for a specific uid.
* Retrieve a single BackupConfig
*/
export function getBackupConfig<T>(requestParameters: GetBackupConfigRequest, requestConfig?: runtime.TypedQueryConfig<T, BackupConfig>): QueryConfig<T> {
    return getBackupConfigRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of BackupConfigs.
 * Retrieve a list of BackupConfigs
 */
function getBackupConfigListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<BackupConfig>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BackupConfig`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(BackupConfigFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of BackupConfigs.
* Retrieve a list of BackupConfigs
*/
export function getBackupConfigList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<BackupConfig>>): QueryConfig<T> {
    return getBackupConfigListRaw( requestConfig);
}

/**
 * Creates a new BackupConfig.
 * Create a new BackupConfig
 */
function postBackupConfigRaw<T>(requestParameters: PostBackupConfigRequest, requestConfig: runtime.TypedQueryConfig<T, BackupConfig> = {}): QueryConfig<T> {
    if (requestParameters.backupConfig === null || requestParameters.backupConfig === undefined) {
        throw new runtime.RequiredError('backupConfig','Required parameter requestParameters.backupConfig was null or undefined when calling postBackupConfig.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BackupConfig`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || BackupConfigToJSON(requestParameters.backupConfig),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BackupConfigFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new BackupConfig.
* Create a new BackupConfig
*/
export function postBackupConfig<T>(requestParameters: PostBackupConfigRequest, requestConfig?: runtime.TypedQueryConfig<T, BackupConfig>): QueryConfig<T> {
    return postBackupConfigRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing BackupConfig.
 * Update an existing BackupConfig
 */
function updateBackupConfigRaw<T>(requestParameters: UpdateBackupConfigRequest, requestConfig: runtime.TypedQueryConfig<T, BackupConfig> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBackupConfig.');
    }

    if (requestParameters.backupConfig === null || requestParameters.backupConfig === undefined) {
        throw new runtime.RequiredError('backupConfig','Required parameter requestParameters.backupConfig was null or undefined when calling updateBackupConfig.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/BackupConfig/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || BackupConfigToJSON(requestParameters.backupConfig),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BackupConfigFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing BackupConfig.
* Update an existing BackupConfig
*/
export function updateBackupConfig<T>(requestParameters: UpdateBackupConfigRequest, requestConfig?: runtime.TypedQueryConfig<T, BackupConfig>): QueryConfig<T> {
    return updateBackupConfigRaw(requestParameters, requestConfig);
}

