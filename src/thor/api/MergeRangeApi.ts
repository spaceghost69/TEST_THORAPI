// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: MergeRangeApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    MergeRange,
    MergeRangeFromJSON,
    MergeRangeToJSON,
} from '../model';

export interface DeleteMergeRangeRequest {
    id: string;
}

export interface GetMergeRangeRequest {
    id: string;
}

export interface PostMergeRangeRequest {
    mergeRange: MergeRange;
}

export interface UpdateMergeRangeRequest {
    id: string;
    mergeRange: MergeRange;
}


/**
 * Deletes a specific MergeRange.
 * Delete a MergeRange.
 */
function deleteMergeRangeRaw<T>(requestParameters: DeleteMergeRangeRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMergeRange.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/MergeRange/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific MergeRange.
* Delete a MergeRange.
*/
export function deleteMergeRange<T>(requestParameters: DeleteMergeRangeRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteMergeRangeRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single MergeRange for a specific uid.
 * Retrieve a single MergeRange
 */
function getMergeRangeRaw<T>(requestParameters: GetMergeRangeRequest, requestConfig: runtime.TypedQueryConfig<T, MergeRange> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMergeRange.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/MergeRange/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MergeRangeFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single MergeRange for a specific uid.
* Retrieve a single MergeRange
*/
export function getMergeRange<T>(requestParameters: GetMergeRangeRequest, requestConfig?: runtime.TypedQueryConfig<T, MergeRange>): QueryConfig<T> {
    return getMergeRangeRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of MergeRanges.
 * Retrieve a list of MergeRanges
 */
function getMergeRangeListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<MergeRange>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/MergeRange`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(MergeRangeFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of MergeRanges.
* Retrieve a list of MergeRanges
*/
export function getMergeRangeList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<MergeRange>>): QueryConfig<T> {
    return getMergeRangeListRaw( requestConfig);
}

/**
 * Creates a new MergeRange.
 * Create a new MergeRange
 */
function postMergeRangeRaw<T>(requestParameters: PostMergeRangeRequest, requestConfig: runtime.TypedQueryConfig<T, MergeRange> = {}): QueryConfig<T> {
    if (requestParameters.mergeRange === null || requestParameters.mergeRange === undefined) {
        throw new runtime.RequiredError('mergeRange','Required parameter requestParameters.mergeRange was null or undefined when calling postMergeRange.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/MergeRange`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || MergeRangeToJSON(requestParameters.mergeRange),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MergeRangeFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new MergeRange.
* Create a new MergeRange
*/
export function postMergeRange<T>(requestParameters: PostMergeRangeRequest, requestConfig?: runtime.TypedQueryConfig<T, MergeRange>): QueryConfig<T> {
    return postMergeRangeRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing MergeRange.
 * Update an existing MergeRange
 */
function updateMergeRangeRaw<T>(requestParameters: UpdateMergeRangeRequest, requestConfig: runtime.TypedQueryConfig<T, MergeRange> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMergeRange.');
    }

    if (requestParameters.mergeRange === null || requestParameters.mergeRange === undefined) {
        throw new runtime.RequiredError('mergeRange','Required parameter requestParameters.mergeRange was null or undefined when calling updateMergeRange.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/MergeRange/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || MergeRangeToJSON(requestParameters.mergeRange),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MergeRangeFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing MergeRange.
* Update an existing MergeRange
*/
export function updateMergeRange<T>(requestParameters: UpdateMergeRangeRequest, requestConfig?: runtime.TypedQueryConfig<T, MergeRange>): QueryConfig<T> {
    return updateMergeRangeRaw(requestParameters, requestConfig);
}

