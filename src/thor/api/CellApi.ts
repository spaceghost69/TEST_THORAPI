// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: CellApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Cell,
    CellFromJSON,
    CellToJSON,
} from '../model';

export interface DeleteCellRequest {
    id: string;
}

export interface GetCellRequest {
    id: string;
}

export interface PostCellRequest {
    cell: Cell;
}

export interface UpdateCellRequest {
    id: string;
    cell: Cell;
}


/**
 * Deletes a specific Cell.
 * Delete a Cell.
 */
function deleteCellRaw<T>(requestParameters: DeleteCellRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCell.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Cell/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Cell.
* Delete a Cell.
*/
export function deleteCell<T>(requestParameters: DeleteCellRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteCellRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Cell for a specific uid.
 * Retrieve a single Cell
 */
function getCellRaw<T>(requestParameters: GetCellRequest, requestConfig: runtime.TypedQueryConfig<T, Cell> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCell.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Cell/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CellFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Cell for a specific uid.
* Retrieve a single Cell
*/
export function getCell<T>(requestParameters: GetCellRequest, requestConfig?: runtime.TypedQueryConfig<T, Cell>): QueryConfig<T> {
    return getCellRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Cells.
 * Retrieve a list of Cells
 */
function getCellListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Cell>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Cell`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(CellFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Cells.
* Retrieve a list of Cells
*/
export function getCellList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Cell>>): QueryConfig<T> {
    return getCellListRaw( requestConfig);
}

/**
 * Creates a new Cell.
 * Create a new Cell
 */
function postCellRaw<T>(requestParameters: PostCellRequest, requestConfig: runtime.TypedQueryConfig<T, Cell> = {}): QueryConfig<T> {
    if (requestParameters.cell === null || requestParameters.cell === undefined) {
        throw new runtime.RequiredError('cell','Required parameter requestParameters.cell was null or undefined when calling postCell.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Cell`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CellToJSON(requestParameters.cell),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CellFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Cell.
* Create a new Cell
*/
export function postCell<T>(requestParameters: PostCellRequest, requestConfig?: runtime.TypedQueryConfig<T, Cell>): QueryConfig<T> {
    return postCellRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Cell.
 * Update an existing Cell
 */
function updateCellRaw<T>(requestParameters: UpdateCellRequest, requestConfig: runtime.TypedQueryConfig<T, Cell> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCell.');
    }

    if (requestParameters.cell === null || requestParameters.cell === undefined) {
        throw new runtime.RequiredError('cell','Required parameter requestParameters.cell was null or undefined when calling updateCell.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Cell/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || CellToJSON(requestParameters.cell),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CellFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Cell.
* Update an existing Cell
*/
export function updateCell<T>(requestParameters: UpdateCellRequest, requestConfig?: runtime.TypedQueryConfig<T, Cell>): QueryConfig<T> {
    return updateCellRaw(requestParameters, requestConfig);
}

