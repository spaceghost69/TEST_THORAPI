// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ChatResponseApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ChatResponse,
    ChatResponseFromJSON,
    ChatResponseToJSON,
} from '../model';

export interface DeleteChatResponseRequest {
    id: string;
}

export interface GetChatResponseRequest {
    id: string;
}

export interface PostChatResponseRequest {
    chatResponse: ChatResponse;
}

export interface UpdateChatResponseRequest {
    id: string;
    chatResponse: ChatResponse;
}


/**
 * Deletes a specific ChatResponse.
 * Delete a ChatResponse.
 */
function deleteChatResponseRaw<T>(requestParameters: DeleteChatResponseRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChatResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific ChatResponse.
* Delete a ChatResponse.
*/
export function deleteChatResponse<T>(requestParameters: DeleteChatResponseRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteChatResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single ChatResponse for a specific uid.
 * Retrieve a single ChatResponse
 */
function getChatResponseRaw<T>(requestParameters: GetChatResponseRequest, requestConfig: runtime.TypedQueryConfig<T, ChatResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChatResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChatResponseFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single ChatResponse for a specific uid.
* Retrieve a single ChatResponse
*/
export function getChatResponse<T>(requestParameters: GetChatResponseRequest, requestConfig?: runtime.TypedQueryConfig<T, ChatResponse>): QueryConfig<T> {
    return getChatResponseRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of ChatResponses.
 * Retrieve a list of ChatResponses
 */
function getChatResponseListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<ChatResponse>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ChatResponseFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of ChatResponses.
* Retrieve a list of ChatResponses
*/
export function getChatResponseList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<ChatResponse>>): QueryConfig<T> {
    return getChatResponseListRaw( requestConfig);
}

/**
 * Creates a new ChatResponse.
 * Create a new ChatResponse
 */
function postChatResponseRaw<T>(requestParameters: PostChatResponseRequest, requestConfig: runtime.TypedQueryConfig<T, ChatResponse> = {}): QueryConfig<T> {
    if (requestParameters.chatResponse === null || requestParameters.chatResponse === undefined) {
        throw new runtime.RequiredError('chatResponse','Required parameter requestParameters.chatResponse was null or undefined when calling postChatResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatResponse`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ChatResponseToJSON(requestParameters.chatResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChatResponseFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new ChatResponse.
* Create a new ChatResponse
*/
export function postChatResponse<T>(requestParameters: PostChatResponseRequest, requestConfig?: runtime.TypedQueryConfig<T, ChatResponse>): QueryConfig<T> {
    return postChatResponseRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ChatResponse.
 * Update an existing ChatResponse
 */
function updateChatResponseRaw<T>(requestParameters: UpdateChatResponseRequest, requestConfig: runtime.TypedQueryConfig<T, ChatResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateChatResponse.');
    }

    if (requestParameters.chatResponse === null || requestParameters.chatResponse === undefined) {
        throw new runtime.RequiredError('chatResponse','Required parameter requestParameters.chatResponse was null or undefined when calling updateChatResponse.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChatResponse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ChatResponseToJSON(requestParameters.chatResponse),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChatResponseFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing ChatResponse.
* Update an existing ChatResponse
*/
export function updateChatResponse<T>(requestParameters: UpdateChatResponseRequest, requestConfig?: runtime.TypedQueryConfig<T, ChatResponse>): QueryConfig<T> {
    return updateChatResponseRaw(requestParameters, requestConfig);
}

