// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SheetRowApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    SheetRow,
    SheetRowFromJSON,
    SheetRowToJSON,
} from '../model';

export interface DeleteSheetRowRequest {
    id: string;
}

export interface GetSheetRowRequest {
    id: string;
}

export interface PostSheetRowRequest {
    sheetRow: SheetRow;
}

export interface UpdateSheetRowRequest {
    id: string;
    sheetRow: SheetRow;
}


/**
 * Deletes a specific SheetRow.
 * Delete a SheetRow.
 */
function deleteSheetRowRaw<T>(requestParameters: DeleteSheetRowRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSheetRow.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SheetRow/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific SheetRow.
* Delete a SheetRow.
*/
export function deleteSheetRow<T>(requestParameters: DeleteSheetRowRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteSheetRowRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single SheetRow for a specific uid.
 * Retrieve a single SheetRow
 */
function getSheetRowRaw<T>(requestParameters: GetSheetRowRequest, requestConfig: runtime.TypedQueryConfig<T, SheetRow> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSheetRow.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SheetRow/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SheetRowFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single SheetRow for a specific uid.
* Retrieve a single SheetRow
*/
export function getSheetRow<T>(requestParameters: GetSheetRowRequest, requestConfig?: runtime.TypedQueryConfig<T, SheetRow>): QueryConfig<T> {
    return getSheetRowRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of SheetRows.
 * Retrieve a list of SheetRows
 */
function getSheetRowListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<SheetRow>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SheetRow`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SheetRowFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of SheetRows.
* Retrieve a list of SheetRows
*/
export function getSheetRowList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<SheetRow>>): QueryConfig<T> {
    return getSheetRowListRaw( requestConfig);
}

/**
 * Creates a new SheetRow.
 * Create a new SheetRow
 */
function postSheetRowRaw<T>(requestParameters: PostSheetRowRequest, requestConfig: runtime.TypedQueryConfig<T, SheetRow> = {}): QueryConfig<T> {
    if (requestParameters.sheetRow === null || requestParameters.sheetRow === undefined) {
        throw new runtime.RequiredError('sheetRow','Required parameter requestParameters.sheetRow was null or undefined when calling postSheetRow.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SheetRow`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SheetRowToJSON(requestParameters.sheetRow),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SheetRowFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new SheetRow.
* Create a new SheetRow
*/
export function postSheetRow<T>(requestParameters: PostSheetRowRequest, requestConfig?: runtime.TypedQueryConfig<T, SheetRow>): QueryConfig<T> {
    return postSheetRowRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing SheetRow.
 * Update an existing SheetRow
 */
function updateSheetRowRaw<T>(requestParameters: UpdateSheetRowRequest, requestConfig: runtime.TypedQueryConfig<T, SheetRow> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSheetRow.');
    }

    if (requestParameters.sheetRow === null || requestParameters.sheetRow === undefined) {
        throw new runtime.RequiredError('sheetRow','Required parameter requestParameters.sheetRow was null or undefined when calling updateSheetRow.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SheetRow/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SheetRowToJSON(requestParameters.sheetRow),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SheetRowFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing SheetRow.
* Update an existing SheetRow
*/
export function updateSheetRow<T>(requestParameters: UpdateSheetRowRequest, requestConfig?: runtime.TypedQueryConfig<T, SheetRow>): QueryConfig<T> {
    return updateSheetRowRaw(requestParameters, requestConfig);
}

