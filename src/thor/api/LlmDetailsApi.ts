// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: LlmDetailsApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    LlmDetails,
    LlmDetailsFromJSON,
    LlmDetailsToJSON,
} from '../model';

export interface DeleteLlmDetailsRequest {
    id: string;
}

export interface GetLlmDetailsRequest {
    id: string;
}

export interface PostLlmDetailsRequest {
    llmDetails: LlmDetails;
}

export interface UpdateLlmDetailsRequest {
    id: string;
    llmDetails: LlmDetails;
}


/**
 * Deletes a specific LlmDetails.
 * Delete a LlmDetails.
 */
function deleteLlmDetailsRaw<T>(requestParameters: DeleteLlmDetailsRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLlmDetails.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LlmDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific LlmDetails.
* Delete a LlmDetails.
*/
export function deleteLlmDetails<T>(requestParameters: DeleteLlmDetailsRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteLlmDetailsRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single LlmDetails for a specific uid.
 * Retrieve a single LlmDetails
 */
function getLlmDetailsRaw<T>(requestParameters: GetLlmDetailsRequest, requestConfig: runtime.TypedQueryConfig<T, LlmDetails> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLlmDetails.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LlmDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LlmDetailsFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single LlmDetails for a specific uid.
* Retrieve a single LlmDetails
*/
export function getLlmDetails<T>(requestParameters: GetLlmDetailsRequest, requestConfig?: runtime.TypedQueryConfig<T, LlmDetails>): QueryConfig<T> {
    return getLlmDetailsRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of LlmDetailss.
 * Retrieve a list of LlmDetailss
 */
function getLlmDetailsListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<LlmDetails>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LlmDetails`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(LlmDetailsFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of LlmDetailss.
* Retrieve a list of LlmDetailss
*/
export function getLlmDetailsList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<LlmDetails>>): QueryConfig<T> {
    return getLlmDetailsListRaw( requestConfig);
}

/**
 * Creates a new LlmDetails.
 * Create a new LlmDetails
 */
function postLlmDetailsRaw<T>(requestParameters: PostLlmDetailsRequest, requestConfig: runtime.TypedQueryConfig<T, LlmDetails> = {}): QueryConfig<T> {
    if (requestParameters.llmDetails === null || requestParameters.llmDetails === undefined) {
        throw new runtime.RequiredError('llmDetails','Required parameter requestParameters.llmDetails was null or undefined when calling postLlmDetails.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LlmDetails`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || LlmDetailsToJSON(requestParameters.llmDetails),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LlmDetailsFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new LlmDetails.
* Create a new LlmDetails
*/
export function postLlmDetails<T>(requestParameters: PostLlmDetailsRequest, requestConfig?: runtime.TypedQueryConfig<T, LlmDetails>): QueryConfig<T> {
    return postLlmDetailsRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing LlmDetails.
 * Update an existing LlmDetails
 */
function updateLlmDetailsRaw<T>(requestParameters: UpdateLlmDetailsRequest, requestConfig: runtime.TypedQueryConfig<T, LlmDetails> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLlmDetails.');
    }

    if (requestParameters.llmDetails === null || requestParameters.llmDetails === undefined) {
        throw new runtime.RequiredError('llmDetails','Required parameter requestParameters.llmDetails was null or undefined when calling updateLlmDetails.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LlmDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || LlmDetailsToJSON(requestParameters.llmDetails),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LlmDetailsFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing LlmDetails.
* Update an existing LlmDetails
*/
export function updateLlmDetails<T>(requestParameters: UpdateLlmDetailsRequest, requestConfig?: runtime.TypedQueryConfig<T, LlmDetails>): QueryConfig<T> {
    return updateLlmDetailsRaw(requestParameters, requestConfig);
}

