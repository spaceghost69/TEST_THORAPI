// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ThorUXComponentApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ThorUXComponent,
    ThorUXComponentFromJSON,
    ThorUXComponentToJSON,
} from '../model';

export interface DeleteThorUXComponentRequest {
    id: string;
}

export interface GetThorUXComponentRequest {
    id: string;
}

export interface PostThorUXComponentRequest {
    thorUXComponent: ThorUXComponent;
}

export interface UpdateThorUXComponentRequest {
    id: string;
    thorUXComponent: ThorUXComponent;
}


/**
 * Deletes a specific ThorUXComponent.
 * Delete a ThorUXComponent.
 */
function deleteThorUXComponentRaw<T>(requestParameters: DeleteThorUXComponentRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteThorUXComponent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific ThorUXComponent.
* Delete a ThorUXComponent.
*/
export function deleteThorUXComponent<T>(requestParameters: DeleteThorUXComponentRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteThorUXComponentRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single ThorUXComponent for a specific uid.
 * Retrieve a single ThorUXComponent
 */
function getThorUXComponentRaw<T>(requestParameters: GetThorUXComponentRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXComponent> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getThorUXComponent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXComponentFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single ThorUXComponent for a specific uid.
* Retrieve a single ThorUXComponent
*/
export function getThorUXComponent<T>(requestParameters: GetThorUXComponentRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXComponent>): QueryConfig<T> {
    return getThorUXComponentRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of ThorUXComponents.
 * Retrieve a list of ThorUXComponents
 */
function getThorUXComponentListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<ThorUXComponent>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ThorUXComponentFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of ThorUXComponents.
* Retrieve a list of ThorUXComponents
*/
export function getThorUXComponentList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<ThorUXComponent>>): QueryConfig<T> {
    return getThorUXComponentListRaw( requestConfig);
}

/**
 * Creates a new ThorUXComponent.
 * Create a new ThorUXComponent
 */
function postThorUXComponentRaw<T>(requestParameters: PostThorUXComponentRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXComponent> = {}): QueryConfig<T> {
    if (requestParameters.thorUXComponent === null || requestParameters.thorUXComponent === undefined) {
        throw new runtime.RequiredError('thorUXComponent','Required parameter requestParameters.thorUXComponent was null or undefined when calling postThorUXComponent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ThorUXComponentToJSON(requestParameters.thorUXComponent),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXComponentFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new ThorUXComponent.
* Create a new ThorUXComponent
*/
export function postThorUXComponent<T>(requestParameters: PostThorUXComponentRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXComponent>): QueryConfig<T> {
    return postThorUXComponentRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ThorUXComponent.
 * Update an existing ThorUXComponent
 */
function updateThorUXComponentRaw<T>(requestParameters: UpdateThorUXComponentRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXComponent> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateThorUXComponent.');
    }

    if (requestParameters.thorUXComponent === null || requestParameters.thorUXComponent === undefined) {
        throw new runtime.RequiredError('thorUXComponent','Required parameter requestParameters.thorUXComponent was null or undefined when calling updateThorUXComponent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ThorUXComponentToJSON(requestParameters.thorUXComponent),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXComponentFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing ThorUXComponent.
* Update an existing ThorUXComponent
*/
export function updateThorUXComponent<T>(requestParameters: UpdateThorUXComponentRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXComponent>): QueryConfig<T> {
    return updateThorUXComponentRaw(requestParameters, requestConfig);
}

