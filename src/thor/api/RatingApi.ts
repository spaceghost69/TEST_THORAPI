// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: RatingApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Rating,
    RatingFromJSON,
    RatingToJSON,
} from '../model';

export interface DeleteRatingRequest {
    id: string;
}

export interface GetRatingRequest {
    id: string;
}

export interface PostRatingRequest {
    rating: Rating;
}

export interface UpdateRatingRequest {
    id: string;
    rating: Rating;
}


/**
 * Deletes a specific Rating.
 * Delete a Rating.
 */
function deleteRatingRaw<T>(requestParameters: DeleteRatingRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRating.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Rating/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Rating.
* Delete a Rating.
*/
export function deleteRating<T>(requestParameters: DeleteRatingRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteRatingRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Rating for a specific uid.
 * Retrieve a single Rating
 */
function getRatingRaw<T>(requestParameters: GetRatingRequest, requestConfig: runtime.TypedQueryConfig<T, Rating> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRating.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Rating/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RatingFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Rating for a specific uid.
* Retrieve a single Rating
*/
export function getRating<T>(requestParameters: GetRatingRequest, requestConfig?: runtime.TypedQueryConfig<T, Rating>): QueryConfig<T> {
    return getRatingRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Ratings.
 * Retrieve a list of Ratings
 */
function getRatingListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Rating>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Rating`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(RatingFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Ratings.
* Retrieve a list of Ratings
*/
export function getRatingList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Rating>>): QueryConfig<T> {
    return getRatingListRaw( requestConfig);
}

/**
 * Creates a new Rating.
 * Create a new Rating
 */
function postRatingRaw<T>(requestParameters: PostRatingRequest, requestConfig: runtime.TypedQueryConfig<T, Rating> = {}): QueryConfig<T> {
    if (requestParameters.rating === null || requestParameters.rating === undefined) {
        throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling postRating.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Rating`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || RatingToJSON(requestParameters.rating),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RatingFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Rating.
* Create a new Rating
*/
export function postRating<T>(requestParameters: PostRatingRequest, requestConfig?: runtime.TypedQueryConfig<T, Rating>): QueryConfig<T> {
    return postRatingRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Rating.
 * Update an existing Rating
 */
function updateRatingRaw<T>(requestParameters: UpdateRatingRequest, requestConfig: runtime.TypedQueryConfig<T, Rating> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRating.');
    }

    if (requestParameters.rating === null || requestParameters.rating === undefined) {
        throw new runtime.RequiredError('rating','Required parameter requestParameters.rating was null or undefined when calling updateRating.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Rating/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || RatingToJSON(requestParameters.rating),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RatingFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Rating.
* Update an existing Rating
*/
export function updateRating<T>(requestParameters: UpdateRatingRequest, requestConfig?: runtime.TypedQueryConfig<T, Rating>): QueryConfig<T> {
    return updateRatingRaw(requestParameters, requestConfig);
}

