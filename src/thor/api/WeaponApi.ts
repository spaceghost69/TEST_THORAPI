// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: WeaponApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Weapon,
    WeaponFromJSON,
    WeaponToJSON,
} from '../model';

export interface DeleteWeaponRequest {
    id: string;
}

export interface GetWeaponRequest {
    id: string;
}

export interface PostWeaponRequest {
    weapon: Weapon;
}

export interface UpdateWeaponRequest {
    id: string;
    weapon: Weapon;
}


/**
 * Deletes a specific Weapon.
 * Delete a Weapon.
 */
function deleteWeaponRaw<T>(requestParameters: DeleteWeaponRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWeapon.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Weapon/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Weapon.
* Delete a Weapon.
*/
export function deleteWeapon<T>(requestParameters: DeleteWeaponRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteWeaponRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Weapon for a specific uid.
 * Retrieve a single Weapon
 */
function getWeaponRaw<T>(requestParameters: GetWeaponRequest, requestConfig: runtime.TypedQueryConfig<T, Weapon> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWeapon.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Weapon/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WeaponFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Weapon for a specific uid.
* Retrieve a single Weapon
*/
export function getWeapon<T>(requestParameters: GetWeaponRequest, requestConfig?: runtime.TypedQueryConfig<T, Weapon>): QueryConfig<T> {
    return getWeaponRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Weapons.
 * Retrieve a list of Weapons
 */
function getWeaponListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Weapon>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Weapon`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(WeaponFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Weapons.
* Retrieve a list of Weapons
*/
export function getWeaponList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Weapon>>): QueryConfig<T> {
    return getWeaponListRaw( requestConfig);
}

/**
 * Creates a new Weapon.
 * Create a new Weapon
 */
function postWeaponRaw<T>(requestParameters: PostWeaponRequest, requestConfig: runtime.TypedQueryConfig<T, Weapon> = {}): QueryConfig<T> {
    if (requestParameters.weapon === null || requestParameters.weapon === undefined) {
        throw new runtime.RequiredError('weapon','Required parameter requestParameters.weapon was null or undefined when calling postWeapon.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Weapon`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || WeaponToJSON(requestParameters.weapon),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WeaponFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Weapon.
* Create a new Weapon
*/
export function postWeapon<T>(requestParameters: PostWeaponRequest, requestConfig?: runtime.TypedQueryConfig<T, Weapon>): QueryConfig<T> {
    return postWeaponRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Weapon.
 * Update an existing Weapon
 */
function updateWeaponRaw<T>(requestParameters: UpdateWeaponRequest, requestConfig: runtime.TypedQueryConfig<T, Weapon> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWeapon.');
    }

    if (requestParameters.weapon === null || requestParameters.weapon === undefined) {
        throw new runtime.RequiredError('weapon','Required parameter requestParameters.weapon was null or undefined when calling updateWeapon.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Weapon/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || WeaponToJSON(requestParameters.weapon),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(WeaponFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Weapon.
* Update an existing Weapon
*/
export function updateWeapon<T>(requestParameters: UpdateWeaponRequest, requestConfig?: runtime.TypedQueryConfig<T, Weapon>): QueryConfig<T> {
    return updateWeaponRaw(requestParameters, requestConfig);
}

