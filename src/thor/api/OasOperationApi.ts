// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: OasOperationApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    OasOperation,
    OasOperationFromJSON,
    OasOperationToJSON,
} from '../model';

export interface DeleteOasOperationRequest {
    id: string;
}

export interface GetOasOperationRequest {
    id: string;
}

export interface PostOasOperationRequest {
    oasOperation: OasOperation;
}

export interface UpdateOasOperationRequest {
    id: string;
    oasOperation: OasOperation;
}


/**
 * Deletes a specific OasOperation.
 * Delete a OasOperation.
 */
function deleteOasOperationRaw<T>(requestParameters: DeleteOasOperationRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOasOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOperation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific OasOperation.
* Delete a OasOperation.
*/
export function deleteOasOperation<T>(requestParameters: DeleteOasOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteOasOperationRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single OasOperation for a specific uid.
 * Retrieve a single OasOperation
 */
function getOasOperationRaw<T>(requestParameters: GetOasOperationRequest, requestConfig: runtime.TypedQueryConfig<T, OasOperation> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOasOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOperation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasOperationFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single OasOperation for a specific uid.
* Retrieve a single OasOperation
*/
export function getOasOperation<T>(requestParameters: GetOasOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, OasOperation>): QueryConfig<T> {
    return getOasOperationRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of OasOperations.
 * Retrieve a list of OasOperations
 */
function getOasOperationListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<OasOperation>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOperation`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OasOperationFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of OasOperations.
* Retrieve a list of OasOperations
*/
export function getOasOperationList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<OasOperation>>): QueryConfig<T> {
    return getOasOperationListRaw( requestConfig);
}

/**
 * Creates a new OasOperation.
 * Create a new OasOperation
 */
function postOasOperationRaw<T>(requestParameters: PostOasOperationRequest, requestConfig: runtime.TypedQueryConfig<T, OasOperation> = {}): QueryConfig<T> {
    if (requestParameters.oasOperation === null || requestParameters.oasOperation === undefined) {
        throw new runtime.RequiredError('oasOperation','Required parameter requestParameters.oasOperation was null or undefined when calling postOasOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOperation`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OasOperationToJSON(requestParameters.oasOperation),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasOperationFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new OasOperation.
* Create a new OasOperation
*/
export function postOasOperation<T>(requestParameters: PostOasOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, OasOperation>): QueryConfig<T> {
    return postOasOperationRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing OasOperation.
 * Update an existing OasOperation
 */
function updateOasOperationRaw<T>(requestParameters: UpdateOasOperationRequest, requestConfig: runtime.TypedQueryConfig<T, OasOperation> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOasOperation.');
    }

    if (requestParameters.oasOperation === null || requestParameters.oasOperation === undefined) {
        throw new runtime.RequiredError('oasOperation','Required parameter requestParameters.oasOperation was null or undefined when calling updateOasOperation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/OasOperation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OasOperationToJSON(requestParameters.oasOperation),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OasOperationFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing OasOperation.
* Update an existing OasOperation
*/
export function updateOasOperation<T>(requestParameters: UpdateOasOperationRequest, requestConfig?: runtime.TypedQueryConfig<T, OasOperation>): QueryConfig<T> {
    return updateOasOperationRaw(requestParameters, requestConfig);
}

