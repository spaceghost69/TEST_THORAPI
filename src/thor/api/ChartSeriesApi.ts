// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ChartSeriesApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ChartSeries,
    ChartSeriesFromJSON,
    ChartSeriesToJSON,
} from '../model';

export interface DeleteChartSeriesRequest {
    id: string;
}

export interface GetChartSeriesRequest {
    id: string;
}

export interface PostChartSeriesRequest {
    chartSeries: ChartSeries;
}

export interface UpdateChartSeriesRequest {
    id: string;
    chartSeries: ChartSeries;
}


/**
 * Deletes a specific ChartSeries.
 * Delete a ChartSeries.
 */
function deleteChartSeriesRaw<T>(requestParameters: DeleteChartSeriesRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChartSeries.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChartSeries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific ChartSeries.
* Delete a ChartSeries.
*/
export function deleteChartSeries<T>(requestParameters: DeleteChartSeriesRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteChartSeriesRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single ChartSeries for a specific uid.
 * Retrieve a single ChartSeries
 */
function getChartSeriesRaw<T>(requestParameters: GetChartSeriesRequest, requestConfig: runtime.TypedQueryConfig<T, ChartSeries> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChartSeries.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChartSeries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChartSeriesFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single ChartSeries for a specific uid.
* Retrieve a single ChartSeries
*/
export function getChartSeries<T>(requestParameters: GetChartSeriesRequest, requestConfig?: runtime.TypedQueryConfig<T, ChartSeries>): QueryConfig<T> {
    return getChartSeriesRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of ChartSeriess.
 * Retrieve a list of ChartSeriess
 */
function getChartSeriesListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<ChartSeries>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChartSeries`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ChartSeriesFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of ChartSeriess.
* Retrieve a list of ChartSeriess
*/
export function getChartSeriesList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<ChartSeries>>): QueryConfig<T> {
    return getChartSeriesListRaw( requestConfig);
}

/**
 * Creates a new ChartSeries.
 * Create a new ChartSeries
 */
function postChartSeriesRaw<T>(requestParameters: PostChartSeriesRequest, requestConfig: runtime.TypedQueryConfig<T, ChartSeries> = {}): QueryConfig<T> {
    if (requestParameters.chartSeries === null || requestParameters.chartSeries === undefined) {
        throw new runtime.RequiredError('chartSeries','Required parameter requestParameters.chartSeries was null or undefined when calling postChartSeries.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChartSeries`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ChartSeriesToJSON(requestParameters.chartSeries),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChartSeriesFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new ChartSeries.
* Create a new ChartSeries
*/
export function postChartSeries<T>(requestParameters: PostChartSeriesRequest, requestConfig?: runtime.TypedQueryConfig<T, ChartSeries>): QueryConfig<T> {
    return postChartSeriesRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ChartSeries.
 * Update an existing ChartSeries
 */
function updateChartSeriesRaw<T>(requestParameters: UpdateChartSeriesRequest, requestConfig: runtime.TypedQueryConfig<T, ChartSeries> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateChartSeries.');
    }

    if (requestParameters.chartSeries === null || requestParameters.chartSeries === undefined) {
        throw new runtime.RequiredError('chartSeries','Required parameter requestParameters.chartSeries was null or undefined when calling updateChartSeries.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ChartSeries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ChartSeriesToJSON(requestParameters.chartSeries),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChartSeriesFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing ChartSeries.
* Update an existing ChartSeries
*/
export function updateChartSeries<T>(requestParameters: UpdateChartSeriesRequest, requestConfig?: runtime.TypedQueryConfig<T, ChartSeries>): QueryConfig<T> {
    return updateChartSeriesRaw(requestParameters, requestConfig);
}

