// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: CustomerApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Customer,
    CustomerFromJSON,
    CustomerToJSON,
} from '../model';

export interface DeleteCustomerRequest {
    id: string;
}

export interface GetCustomerRequest {
    id: string;
}

export interface PostCustomerRequest {
    customer: Customer;
}

export interface UpdateCustomerRequest {
    id: string;
    customer: Customer;
}


/**
 * Deletes a specific Customer.
 * Delete a Customer.
 */
function deleteCustomerRaw<T>(requestParameters: DeleteCustomerRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCustomer.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Customer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Customer.
* Delete a Customer.
*/
export function deleteCustomer<T>(requestParameters: DeleteCustomerRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteCustomerRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single Customer for a specific uid.
 * Retrieve a single Customer
 */
function getCustomerRaw<T>(requestParameters: GetCustomerRequest, requestConfig: runtime.TypedQueryConfig<T, Customer> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomer.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Customer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CustomerFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single Customer for a specific uid.
* Retrieve a single Customer
*/
export function getCustomer<T>(requestParameters: GetCustomerRequest, requestConfig?: runtime.TypedQueryConfig<T, Customer>): QueryConfig<T> {
    return getCustomerRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of Customers.
 * Retrieve a list of Customers
 */
function getCustomerListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Customer>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Customer`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(CustomerFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Customers.
* Retrieve a list of Customers
*/
export function getCustomerList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Customer>>): QueryConfig<T> {
    return getCustomerListRaw( requestConfig);
}

/**
 * Creates a new Customer.
 * Create a new Customer
 */
function postCustomerRaw<T>(requestParameters: PostCustomerRequest, requestConfig: runtime.TypedQueryConfig<T, Customer> = {}): QueryConfig<T> {
    if (requestParameters.customer === null || requestParameters.customer === undefined) {
        throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling postCustomer.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Customer`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CustomerToJSON(requestParameters.customer),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CustomerFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Customer.
* Create a new Customer
*/
export function postCustomer<T>(requestParameters: PostCustomerRequest, requestConfig?: runtime.TypedQueryConfig<T, Customer>): QueryConfig<T> {
    return postCustomerRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Customer.
 * Update an existing Customer
 */
function updateCustomerRaw<T>(requestParameters: UpdateCustomerRequest, requestConfig: runtime.TypedQueryConfig<T, Customer> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCustomer.');
    }

    if (requestParameters.customer === null || requestParameters.customer === undefined) {
        throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling updateCustomer.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Customer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || CustomerToJSON(requestParameters.customer),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CustomerFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Customer.
* Update an existing Customer
*/
export function updateCustomer<T>(requestParameters: UpdateCustomerRequest, requestConfig?: runtime.TypedQueryConfig<T, Customer>): QueryConfig<T> {
    return updateCustomerRaw(requestParameters, requestConfig);
}

