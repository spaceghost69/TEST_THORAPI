// tslint:disable

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apis.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SalesActivityApi
*/

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    SalesActivity,
    SalesActivityFromJSON,
    SalesActivityToJSON,
} from '../model';

export interface DeleteSalesActivityRequest {
    id: string;
}

export interface GetSalesActivityRequest {
    id: string;
}

export interface PostSalesActivityRequest {
    salesActivity: SalesActivity;
}

export interface UpdateSalesActivityRequest {
    id: string;
    salesActivity: SalesActivity;
}


/**
 * Deletes a specific SalesActivity.
 * Delete a SalesActivity.
 */
function deleteSalesActivityRaw<T>(requestParameters: DeleteSalesActivityRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSalesActivity.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesActivity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific SalesActivity.
* Delete a SalesActivity.
*/
export function deleteSalesActivity<T>(requestParameters: DeleteSalesActivityRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteSalesActivityRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a single SalesActivity for a specific uid.
 * Retrieve a single SalesActivity
 */
function getSalesActivityRaw<T>(requestParameters: GetSalesActivityRequest, requestConfig: runtime.TypedQueryConfig<T, SalesActivity> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSalesActivity.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesActivity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SalesActivityFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a single SalesActivity for a specific uid.
* Retrieve a single SalesActivity
*/
export function getSalesActivity<T>(requestParameters: GetSalesActivityRequest, requestConfig?: runtime.TypedQueryConfig<T, SalesActivity>): QueryConfig<T> {
    return getSalesActivityRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a list of SalesActivitys.
 * Retrieve a list of SalesActivitys
 */
function getSalesActivityListRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<SalesActivity>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesActivity`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SalesActivityFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of SalesActivitys.
* Retrieve a list of SalesActivitys
*/
export function getSalesActivityList<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<SalesActivity>>): QueryConfig<T> {
    return getSalesActivityListRaw( requestConfig);
}

/**
 * Creates a new SalesActivity.
 * Create a new SalesActivity
 */
function postSalesActivityRaw<T>(requestParameters: PostSalesActivityRequest, requestConfig: runtime.TypedQueryConfig<T, SalesActivity> = {}): QueryConfig<T> {
    if (requestParameters.salesActivity === null || requestParameters.salesActivity === undefined) {
        throw new runtime.RequiredError('salesActivity','Required parameter requestParameters.salesActivity was null or undefined when calling postSalesActivity.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesActivity`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SalesActivityToJSON(requestParameters.salesActivity),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SalesActivityFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new SalesActivity.
* Create a new SalesActivity
*/
export function postSalesActivity<T>(requestParameters: PostSalesActivityRequest, requestConfig?: runtime.TypedQueryConfig<T, SalesActivity>): QueryConfig<T> {
    return postSalesActivityRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing SalesActivity.
 * Update an existing SalesActivity
 */
function updateSalesActivityRaw<T>(requestParameters: UpdateSalesActivityRequest, requestConfig: runtime.TypedQueryConfig<T, SalesActivity> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSalesActivity.');
    }

    if (requestParameters.salesActivity === null || requestParameters.salesActivity === undefined) {
        throw new runtime.RequiredError('salesActivity','Required parameter requestParameters.salesActivity was null or undefined when calling updateSalesActivity.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SalesActivity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SalesActivityToJSON(requestParameters.salesActivity),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SalesActivityFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing SalesActivity.
* Update an existing SalesActivity
*/
export function updateSalesActivity<T>(requestParameters: UpdateSalesActivityRequest, requestConfig?: runtime.TypedQueryConfig<T, SalesActivity>): QueryConfig<T> {
    return updateSalesActivityRaw(requestParameters, requestConfig);
}

