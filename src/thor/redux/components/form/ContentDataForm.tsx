import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React from 'react';
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from 'react-bootstrap';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '../../../../components/CoolButton';
import * as Yup from 'yup';
import { ContentData, ContentDataContentTypeEnum, ContentDataCategoryEnum, ContentDataStatusEnum,  } from '../../../model';
import { useAddContentDataMutation } from '../../services/ContentDataService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi

Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-01-03T16:22:47.869548-08:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ContentData
*/

{/* ENUMS FOR FORM VALIDATIONS */}

    

const ContentTypeValidation = () => { 
  return(
    [
      'plaintext', 'markdown', 'json', 'yaml', 'audio', 'video', 'url', 'binary', 
    ]
  )
};

const CategoryValidation = () => { 
  return(
    [
      'CodeGen', 'DOCS', 'BLOG', 'Product', 'SECURITY', 'Event', 
    ]
  )
};

const StatusValidation = () => { 
  return(
    [
      'holding', 'editing', 'published', 
    ]
  )
};



{/* MUSTACHE FORM VALIDATIONS */}
const validationSchema = Yup.object().shape({

     authorName: Yup.string()
    
    
    
    
    ,
     title: Yup.string()
    
    
    
    
    ,
     subtitle: Yup.string()
    
    
    
    
    ,
     contentUrl: Yup.string()
    
    
    
    
    ,
     contentData: Yup.string()
    
    
    
    
    ,
     contentType: Yup.string().oneOf(ContentTypeValidation(), 'Invalid value selected for contentType')
    
    
    
    
    ,
     thumbnailImage: Yup.string()
    
    
    
    
    ,
     largeImage: Yup.string()
    
    
    
    
    ,
     category: Yup.string().oneOf(CategoryValidation(), 'Invalid value selected for category')
    
    
    
    
    ,
     status: Yup.string().oneOf(StatusValidation(), 'Invalid value selected for status')
    
    
    
    
    ,
     releaseDate: Yup.date()
    
    
    
    
    ,
     principalId: Yup.string()
    
    
    
    
    ,
         id: Yup.string()
    
    
    
    
    ,
     ownerId: Yup.string()
    
    
    
    
    ,
     createdDate: Yup.date()
    
    
    
    
    ,
     keyHash: Yup.string()
    
    
    
    
    ,
     lastAccessedById: Yup.string()
    
    
    
    
    ,
     lastAccessedDate: Yup.date()
    
    
    
    
    ,
     lastModifiedById: Yup.string()
    
    
    
    
    ,
     lastModifiedDate: Yup.date()
    
    
    
    
    ,

});

const ContentDataForm: React.FC = () => {
  const [addContentData, addContentDataResult] = useAddContentDataMutation();

  const initialValues: ContentData = {
    
    
    authorName : 'Jimjam McYoyo',
    
    
    
    
    
    
    
    title : 'Amazing Things Happened',
    
    
    
    
    
    
    
    subtitle : 'Many detailed things about all the things that hapened.',
    
    
    
    
    
    
    
    contentUrl : 'The url to the location of the full content',
    
    
    
    
    
    
    
    contentData : 'The full content',
    
    
    
    
    
        contentType :   ContentDataContentTypeEnum[Object.keys(ContentDataContentTypeEnum)[0]], 
    
    
    thumbnailImage : 'https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png',
    
    
    
    
    
    
    
    largeImage : 'https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png',
    
    
    
    
    
        category :   ContentDataCategoryEnum[Object.keys(ContentDataCategoryEnum)[0]], 
        status :   ContentDataStatusEnum[Object.keys(ContentDataStatusEnum)[0]], 
    
    
    
    releaseDate : new Date(), 
    
    
    
    
    
    
    principalId : 'null',
    
    
    
    
    
    
    
    id : 'dc734ea0-5fa6-4147-b867-fba9849ce127',
    
    
    
    
    
    
    
    ownerId : 'bbf5fafc-2e00-4167-ad99-3abce968f129',
    
    
    
    
    
    
    
    
    createdDate : new Date(), 
    
    
    
    
    
    
    keyHash : 'null',
    
    
    
    
    
    
    
    lastAccessedById : '9dda17f7-3dad-4e27-af12-c2fc49cf31e1',
    
    
    
    
    
    
    
    
    lastAccessedDate : new Date(), 
    
    
    
    
    
    
    lastModifiedById : '12d1e1b5-56db-42ea-9c02-e21facea7544',
    
    
    
    
    
    
    
    
    lastModifiedDate : new Date(), 
    
    
    
    
    
  };

  const handleSubmit = (values: FormikValues,
    { setSubmitting }: FormikHelpers<ContentData>) => {
    setTimeout(() => {
      console.log(values);
      addContentData(values);
      setSubmitting(false);
    }, 500);
  }

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >

        {({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
          <form onSubmit={handleSubmit} className="form">

                    <Accordion
                      defaultActiveKey="1"
                    >
                      <Accordion.Item eventKey="0">
                        <Accordion.Header><FaCogs size={36}/></Accordion.Header>
                        <Accordion.Body>
                          errors: {JSON.stringify(errors)}
                          <br />
                          touched: {JSON.stringify(touched)}
                          <br />
                          addContentDataResult: {JSON.stringify(addContentDataResult)}
                        </Accordion.Body>
                      </Accordion.Item>

                      <Accordion.Item eventKey="1">
                        <Accordion.Header><FaRegPlusSquare  size={36}/> Add New ContentData</Accordion.Header>
                        <Accordion.Body>

        {/* MUSTACHE FORM FIELDS */}


        
            <label htmlFor="authorName" className="nice-form-control">
              <b>Author Name: {touched.authorName && !errors.authorName && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* authorName  TEXT FIELD */}
              <Field name="authorName" type="text"
                className={errors.authorName  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="authorName" component="span" />
            </label>


        
            <label htmlFor="title" className="nice-form-control">
              <b>Title: {touched.title && !errors.title && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* title  TEXT FIELD */}
              <Field name="title" type="text"
                className={errors.title  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="title" component="span" />
            </label>


        
            <label htmlFor="subtitle" className="nice-form-control">
              <b>Subtitle: {touched.subtitle && !errors.subtitle && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* subtitle  TEXT FIELD */}
              <Field name="subtitle" type="text"
                className={errors.subtitle  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="subtitle" component="span" />
            </label>


        
            <label htmlFor="contentUrl" className="nice-form-control">
              <b>Content Url: {touched.contentUrl && !errors.contentUrl && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* contentUrl  TEXT FIELD */}
              <Field name="contentUrl" type="text"
                className={errors.contentUrl  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="contentUrl" component="span" />
            </label>


        
            <label htmlFor="contentData" className="nice-form-control">
              <b>Content Data: {touched.contentData && !errors.contentData && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* contentData  TEXT FIELD */}
              <Field name="contentData" type="text"
                className={errors.contentData  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="contentData" component="span" />
            </label>


        
            <label htmlFor="contentType" className="nice-form-control">
              <b>Content Type: {touched.contentType && !errors.contentType && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
                    {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="contentType"
                className={errors.contentType ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('contentType', true);
                  setFieldValue('contentType', e.target.value);
                }}
              >
                <option value="" label="Select Content Type" />
                <ContentTypeLookup />
              </BSForm.Select>
              <ErrorMessage className='error' name="contentType" component="span" />
            </label>


        
            <label htmlFor="thumbnailImage" className="nice-form-control">
              <b>Thumbnail Image: {touched.thumbnailImage && !errors.thumbnailImage && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* thumbnailImage  TEXT FIELD */}
              <Field name="thumbnailImage" type="text"
                className={errors.thumbnailImage  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="thumbnailImage" component="span" />
            </label>


        
            <label htmlFor="largeImage" className="nice-form-control">
              <b>Large Image: {touched.largeImage && !errors.largeImage && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* largeImage  TEXT FIELD */}
              <Field name="largeImage" type="text"
                className={errors.largeImage  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="largeImage" component="span" />
            </label>


        
            <label htmlFor="category" className="nice-form-control">
              <b>Category: {touched.category && !errors.category && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
                    {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="category"
                className={errors.category ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('category', true);
                  setFieldValue('category', e.target.value);
                }}
              >
                <option value="" label="Select Category" />
                <CategoryLookup />
              </BSForm.Select>
              <ErrorMessage className='error' name="category" component="span" />
            </label>


        
            <label htmlFor="status" className="nice-form-control">
              <b>Status: {touched.status && !errors.status && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
                    {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="status"
                className={errors.status ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('status', true);
                  setFieldValue('status', e.target.value);
                }}
              >
                <option value="" label="Select Status" />
                <StatusLookup />
              </BSForm.Select>
              <ErrorMessage className='error' name="status" component="span" />
            </label>


        
            <label htmlFor="releaseDate" className="nice-form-control">
              <b>Release Date: {touched.releaseDate && !errors.releaseDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*releaseDate DATE FIELD */}
              <Field name="releaseDate" type="date"
                className={errors.releaseDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="releaseDate" component="span" />
            </label>


        
            <label htmlFor="principalId" className="nice-form-control">
              <b>Principal Id: {touched.principalId && !errors.principalId && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* principalId  TEXT FIELD */}
              <Field name="principalId" type="text"
                className={errors.principalId  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="principalId" component="span" />
            </label>


        
            <label htmlFor="id" className="nice-form-control">
              <b>Id: {touched.id && !errors.id && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* id  TEXT FIELD */}
              <Field name="id" type="text"
                className={errors.id  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="id" component="span" />
            </label>


        
            <label htmlFor="ownerId" className="nice-form-control">
              <b>Owner Id: {touched.ownerId && !errors.ownerId && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* ownerId  TEXT FIELD */}
              <Field name="ownerId" type="text"
                className={errors.ownerId  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="ownerId" component="span" />
            </label>


        
            <label htmlFor="createdDate" className="nice-form-control">
              <b>Created Date: {touched.createdDate && !errors.createdDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*createdDate DATE FIELD */}
              <Field name="createdDate" type="date"
                className={errors.createdDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="createdDate" component="span" />
            </label>


        
            <label htmlFor="keyHash" className="nice-form-control">
              <b>Key Hash: {touched.keyHash && !errors.keyHash && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* keyHash  TEXT FIELD */}
              <Field name="keyHash" type="text"
                className={errors.keyHash  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="keyHash" component="span" />
            </label>


        
            <label htmlFor="lastAccessedById" className="nice-form-control">
              <b>Last Accessed By Id: {touched.lastAccessedById && !errors.lastAccessedById && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* lastAccessedById  TEXT FIELD */}
              <Field name="lastAccessedById" type="text"
                className={errors.lastAccessedById  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="lastAccessedById" component="span" />
            </label>


        
            <label htmlFor="lastAccessedDate" className="nice-form-control">
              <b>Last Accessed Date: {touched.lastAccessedDate && !errors.lastAccessedDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*lastAccessedDate DATE FIELD */}
              <Field name="lastAccessedDate" type="date"
                className={errors.lastAccessedDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="lastAccessedDate" component="span" />
            </label>


        
            <label htmlFor="lastModifiedById" className="nice-form-control">
              <b>Last Modified By Id: {touched.lastModifiedById && !errors.lastModifiedById && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* lastModifiedById  TEXT FIELD */}
              <Field name="lastModifiedById" type="text"
                className={errors.lastModifiedById  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="lastModifiedById" component="span" />
            </label>


        
            <label htmlFor="lastModifiedDate" className="nice-form-control">
              <b>Last Modified Date: {touched.lastModifiedDate && !errors.lastModifiedDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*lastModifiedDate DATE FIELD */}
              <Field name="lastModifiedDate" type="date"
                className={errors.lastModifiedDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="lastModifiedDate" component="span" />
            </label>

 
<br /><br />

                    <CoolButton
                      variant={(touched && isValid) ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                      type="submit"
                      onClick={() => { }}
                    >
                      {isSubmitting && (
                        <Spinner
                          style={ { float: "left" } }
                          as="span"
                          animation="grow"
                          variant="light"
                          aria-hidden="true"
                        />
                      )}
                      <FaCheckCircle size={30} /> Create New ContentData
                    </CoolButton>


                        </Accordion.Body>
                      </Accordion.Item>
                    </Accordion>

          </form>
        )}
    </Formik>
    </div >
  );
};

/*

lowercase contenttypelookup
uppercase CONTENTTYPELOOKUP
snakecase content_type_lookup
pascalcase ContentTypeLookup
camelcase contentTypeLookup
kebabcase content-type-lookup


*/

const ContentTypeLookup = () => { 
  return(
  <>
    
    <option value='plaintext' label='Plaintext' />
    
    
    <option value='markdown' label='Markdown' />
    
    
    <option value='json' label='Json' />
    
    
    <option value='yaml' label='Yaml' />
    
    
    <option value='audio' label='Audio' />
    
    
    <option value='video' label='Video' />
    
    
    <option value='url' label='Url' />
    
    
    <option value='binary' label='Binary' />
    
  </>
  )
};



/*

lowercase categorylookup
uppercase CATEGORYLOOKUP
snakecase category_lookup
pascalcase CategoryLookup
camelcase categoryLookup
kebabcase category-lookup


*/

const CategoryLookup = () => { 
  return(
  <>
    
    <option value='CodeGen' label='Code Gen' />
    
    
    <option value='DOCS' label='Docs' />
    
    
    <option value='BLOG' label='Blog' />
    
    
    <option value='Product' label='Product' />
    
    
    <option value='SECURITY' label='Security' />
    
    
    <option value='Event' label='Event' />
    
  </>
  )
};



/*

lowercase statuslookup
uppercase STATUSLOOKUP
snakecase status_lookup
pascalcase StatusLookup
camelcase statusLookup
kebabcase status-lookup


*/

const StatusLookup = () => { 
  return(
  <>
    
    <option value='holding' label='Holding' />
    
    
    <option value='editing' label='Editing' />
    
    
    <option value='published' label='Published' />
    
  </>
  )
};






export default ContentDataForm;
