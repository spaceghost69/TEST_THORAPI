import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React from 'react';
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from 'react-bootstrap';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '../../../../components/CoolButton';
import * as Yup from 'yup';
import { ContentMediaLink, ContentMediaLinkContentUseEnum, ContentMediaLinkContentTypeEnum,  } from '../../../model';
import { useAddContentMediaLinkMutation } from '../../services/ContentMediaLinkService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi

Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-01-03T16:22:47.869548-08:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ContentMediaLink
*/

{/* ENUMS FOR FORM VALIDATIONS */}

    

const ContentUseValidation = () => { 
  return(
    [
      'none', 'screenshot', 'selfie', 'portrait', 'promotional', 'informational', 'entertainment', 'product', 'support', 'training', 
    ]
  )
};

const ContentTypeValidation = () => { 
  return(
    [
      'image', 'icon', 'video', 'audio', 'text', 'json', 'yaml', 'xml', 'markdown', 'spreadsheet', 'pdf', 
    ]
  )
};



{/* MUSTACHE FORM VALIDATIONS */}
const validationSchema = Yup.object().shape({

     applicationId: Yup.string()
    
    
    
    
    ,
     contentDataId: Yup.string()
    
    
    
    
    ,
     contentUse: Yup.string().oneOf(ContentUseValidation(), 'Invalid value selected for contentUse')
    
    
    
    
    ,
     contentType: Yup.string().oneOf(ContentTypeValidation(), 'Invalid value selected for contentType')
    
    
    
    
    ,
     mediaUrl: Yup.string()
    
    
    
    
    ,
     id: Yup.string()
    
    
    
    
    ,
     ownerId: Yup.string()
    
    
    
    
    ,
     createdDate: Yup.date()
    
    
    
    
    ,
     keyHash: Yup.string()
    
    
    
    
    ,
     lastAccessedById: Yup.string()
    
    
    
    
    ,
     lastAccessedDate: Yup.date()
    
    
    
    
    ,
     lastModifiedById: Yup.string()
    
    
    
    
    ,
     lastModifiedDate: Yup.date()
    
    
    
    
    ,

});

const ContentMediaLinkForm: React.FC = () => {
  const [addContentMediaLink, addContentMediaLinkResult] = useAddContentMediaLinkMutation();

  const initialValues: ContentMediaLink = {
    
    
    applicationId : 'null',
    
    
    
    
    
    
    
    contentDataId : 'null',
    
    
    
    
    
        contentUse :   ContentMediaLinkContentUseEnum[Object.keys(ContentMediaLinkContentUseEnum)[0]], 
        contentType :   ContentMediaLinkContentTypeEnum[Object.keys(ContentMediaLinkContentTypeEnum)[0]], 
    
    
    mediaUrl : 'null',
    
    
    
    
    
    
    
    id : 'db3b4973-11f0-4789-a296-c612f0c5e4a0',
    
    
    
    
    
    
    
    ownerId : '209291e8-4da1-459c-b369-03cd93b15707',
    
    
    
    
    
    
    
    
    createdDate : new Date(), 
    
    
    
    
    
    
    keyHash : 'null',
    
    
    
    
    
    
    
    lastAccessedById : 'e37f321d-d34f-4516-907b-f4626e955645',
    
    
    
    
    
    
    
    
    lastAccessedDate : new Date(), 
    
    
    
    
    
    
    lastModifiedById : '85b9ccff-ee11-4973-bbef-0082a6886e2e',
    
    
    
    
    
    
    
    
    lastModifiedDate : new Date(), 
    
    
    
    
    
  };

  const handleSubmit = (values: FormikValues,
    { setSubmitting }: FormikHelpers<ContentMediaLink>) => {
    setTimeout(() => {
      console.log(values);
      addContentMediaLink(values);
      setSubmitting(false);
    }, 500);
  }

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >

        {({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
          <form onSubmit={handleSubmit} className="form">

                    <Accordion
                      defaultActiveKey="1"
                    >
                      <Accordion.Item eventKey="0">
                        <Accordion.Header><FaCogs size={36}/></Accordion.Header>
                        <Accordion.Body>
                          errors: {JSON.stringify(errors)}
                          <br />
                          touched: {JSON.stringify(touched)}
                          <br />
                          addContentMediaLinkResult: {JSON.stringify(addContentMediaLinkResult)}
                        </Accordion.Body>
                      </Accordion.Item>

                      <Accordion.Item eventKey="1">
                        <Accordion.Header><FaRegPlusSquare  size={36}/> Add New ContentMediaLink</Accordion.Header>
                        <Accordion.Body>

        {/* MUSTACHE FORM FIELDS */}


        
            <label htmlFor="applicationId" className="nice-form-control">
              <b>Application Id: {touched.applicationId && !errors.applicationId && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* applicationId  TEXT FIELD */}
              <Field name="applicationId" type="text"
                className={errors.applicationId  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="applicationId" component="span" />
            </label>


        
            <label htmlFor="contentDataId" className="nice-form-control">
              <b>Content Data Id: {touched.contentDataId && !errors.contentDataId && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* contentDataId  TEXT FIELD */}
              <Field name="contentDataId" type="text"
                className={errors.contentDataId  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="contentDataId" component="span" />
            </label>


        
            <label htmlFor="contentUse" className="nice-form-control">
              <b>Content Use: {touched.contentUse && !errors.contentUse && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
                    {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="contentUse"
                className={errors.contentUse ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('contentUse', true);
                  setFieldValue('contentUse', e.target.value);
                }}
              >
                <option value="" label="Select Content Use" />
                <ContentUseLookup />
              </BSForm.Select>
              <ErrorMessage className='error' name="contentUse" component="span" />
            </label>


        
            <label htmlFor="contentType" className="nice-form-control">
              <b>Content Type: {touched.contentType && !errors.contentType && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
                    {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="contentType"
                className={errors.contentType ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('contentType', true);
                  setFieldValue('contentType', e.target.value);
                }}
              >
                <option value="" label="Select Content Type" />
                <ContentTypeLookup />
              </BSForm.Select>
              <ErrorMessage className='error' name="contentType" component="span" />
            </label>


        
            <label htmlFor="mediaUrl" className="nice-form-control">
              <b>Media Url: {touched.mediaUrl && !errors.mediaUrl && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* mediaUrl  TEXT FIELD */}
              <Field name="mediaUrl" type="text"
                className={errors.mediaUrl  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="mediaUrl" component="span" />
            </label>


        
            <label htmlFor="id" className="nice-form-control">
              <b>Id: {touched.id && !errors.id && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* id  TEXT FIELD */}
              <Field name="id" type="text"
                className={errors.id  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="id" component="span" />
            </label>


        
            <label htmlFor="ownerId" className="nice-form-control">
              <b>Owner Id: {touched.ownerId && !errors.ownerId && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* ownerId  TEXT FIELD */}
              <Field name="ownerId" type="text"
                className={errors.ownerId  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="ownerId" component="span" />
            </label>


        
            <label htmlFor="createdDate" className="nice-form-control">
              <b>Created Date: {touched.createdDate && !errors.createdDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*createdDate DATE FIELD */}
              <Field name="createdDate" type="date"
                className={errors.createdDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="createdDate" component="span" />
            </label>


        
            <label htmlFor="keyHash" className="nice-form-control">
              <b>Key Hash: {touched.keyHash && !errors.keyHash && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* keyHash  TEXT FIELD */}
              <Field name="keyHash" type="text"
                className={errors.keyHash  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="keyHash" component="span" />
            </label>


        
            <label htmlFor="lastAccessedById" className="nice-form-control">
              <b>Last Accessed By Id: {touched.lastAccessedById && !errors.lastAccessedById && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* lastAccessedById  TEXT FIELD */}
              <Field name="lastAccessedById" type="text"
                className={errors.lastAccessedById  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="lastAccessedById" component="span" />
            </label>


        
            <label htmlFor="lastAccessedDate" className="nice-form-control">
              <b>Last Accessed Date: {touched.lastAccessedDate && !errors.lastAccessedDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*lastAccessedDate DATE FIELD */}
              <Field name="lastAccessedDate" type="date"
                className={errors.lastAccessedDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="lastAccessedDate" component="span" />
            </label>


        
            <label htmlFor="lastModifiedById" className="nice-form-control">
              <b>Last Modified By Id: {touched.lastModifiedById && !errors.lastModifiedById && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* lastModifiedById  TEXT FIELD */}
              <Field name="lastModifiedById" type="text"
                className={errors.lastModifiedById  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="lastModifiedById" component="span" />
            </label>


        
            <label htmlFor="lastModifiedDate" className="nice-form-control">
              <b>Last Modified Date: {touched.lastModifiedDate && !errors.lastModifiedDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*lastModifiedDate DATE FIELD */}
              <Field name="lastModifiedDate" type="date"
                className={errors.lastModifiedDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="lastModifiedDate" component="span" />
            </label>

 
<br /><br />

                    <CoolButton
                      variant={(touched && isValid) ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                      type="submit"
                      onClick={() => { }}
                    >
                      {isSubmitting && (
                        <Spinner
                          style={ { float: "left" } }
                          as="span"
                          animation="grow"
                          variant="light"
                          aria-hidden="true"
                        />
                      )}
                      <FaCheckCircle size={30} /> Create New ContentMediaLink
                    </CoolButton>


                        </Accordion.Body>
                      </Accordion.Item>
                    </Accordion>

          </form>
        )}
    </Formik>
    </div >
  );
};

/*

lowercase contentuselookup
uppercase CONTENTUSELOOKUP
snakecase content_use_lookup
pascalcase ContentUseLookup
camelcase contentUseLookup
kebabcase content-use-lookup


*/

const ContentUseLookup = () => { 
  return(
  <>
    
    <option value='none' label='None' />
    
    
    <option value='screenshot' label='Screenshot' />
    
    
    <option value='selfie' label='Selfie' />
    
    
    <option value='portrait' label='Portrait' />
    
    
    <option value='promotional' label='Promotional' />
    
    
    <option value='informational' label='Informational' />
    
    
    <option value='entertainment' label='Entertainment' />
    
    
    <option value='product' label='Product' />
    
    
    <option value='support' label='Support' />
    
    
    <option value='training' label='Training' />
    
  </>
  )
};



/*

lowercase contenttypelookup
uppercase CONTENTTYPELOOKUP
snakecase content_type_lookup
pascalcase ContentTypeLookup
camelcase contentTypeLookup
kebabcase content-type-lookup


*/

const ContentTypeLookup = () => { 
  return(
  <>
    
    <option value='image' label='Image' />
    
    
    <option value='icon' label='Icon' />
    
    
    <option value='video' label='Video' />
    
    
    <option value='audio' label='Audio' />
    
    
    <option value='text' label='Text' />
    
    
    <option value='json' label='Json' />
    
    
    <option value='yaml' label='Yaml' />
    
    
    <option value='xml' label='Xml' />
    
    
    <option value='markdown' label='Markdown' />
    
    
    <option value='spreadsheet' label='Spreadsheet' />
    
    
    <option value='pdf' label='Pdf' />
    
  </>
  )
};






export default ContentMediaLinkForm;
