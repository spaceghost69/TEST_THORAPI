import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React from 'react';
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from 'react-bootstrap';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '../../../../components/CoolButton';
import * as Yup from 'yup';
import { Chart, ChartChartTypeEnum,  } from '../../../model';
import { useAddChartMutation } from '../../services/ChartService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com/thorapi

Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2024-12-30T08:46:46.125225-08:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Chart
*/

{/* ENUMS FOR FORM VALIDATIONS */}

    

const ChartTypeValidation = () => { 
  return(
    [
      'Area', 'Bar', 'Column', 'Line', 'Pie', 'Scatter', 'Radar', 'Doughnut', 'Stock', 
    ]
  )
};



{/* MUSTACHE FORM VALIDATIONS */}
const validationSchema = Yup.object().shape({

     sheetId: Yup.string()
    
    
    
    
    ,
     name: Yup.string()
    
    
    
    
    ,
     chartType: Yup.string().oneOf(ChartTypeValidation(), 'Invalid value selected for chartType')
    
    
    
    
    ,
     title: Yup.string()
    
    
    
    
    ,
     axisLabelX: Yup.string()
    
    
    
    
    ,
     axisLabelY: Yup.string()
    
    
    
    
    ,
     categoryRange: Yup.string()
    
    
    
    
    ,
    embedded: Yup.boolean()
    
    .oneOf([true], "The embedded value must be true.")
    
    
    ,
     anchorCell: Yup.string()
    
    
    
    
    ,
     anchorOffsetX: Yup.number()
    
    
    
    
    ,
     anchorOffsetY: Yup.number()
    
    
    
    
    ,
     width: Yup.number()
    
    
    
    
    ,
     height: Yup.number()
    
    
    
    
    ,
     id: Yup.string()
    
    
    
    
    ,
     ownerId: Yup.string()
    
    
    
    
    ,
     createdDate: Yup.date()
    
    
    
    
    ,
     keyHash: Yup.string()
    
    
    
    
    ,
     lastAccessedById: Yup.string()
    
    
    
    
    ,
     lastAccessedDate: Yup.date()
    
    
    
    
    ,
     lastModifiedById: Yup.string()
    
    
    
    
    ,
     lastModifiedDate: Yup.date()
    
    
    
    
    ,

});

const ChartForm: React.FC = () => {
  const [addChart, addChartResult] = useAddChartMutation();

  const initialValues: Chart = {
    
    
    sheetId : 'null',
    
    
    
    
    
    
    
    name : 'SalesPerformanceChart',
    
    
    
    
    
        chartType :   ChartChartTypeEnum[Object.keys(ChartChartTypeEnum)[0]], 
    
    
    title : 'Monthly Sales Performance',
    
    
    
    
    
    
    
    axisLabelX : 'Months',
    
    
    
    
    
    
    
    axisLabelY : 'Revenue (USD)',
    
    
    
    
    
    
    
    categoryRange : 'Sheet1!A2:A12',
    
    
    
    
    
    
    embedded : true,
    
    
    
    
    
    
    
    
    anchorCell : 'B2',
    
    
    
    
    
    
    
    
    
    anchorOffsetX : 0, 
    
    
    
    
    
    
    
    anchorOffsetY : 0, 
    
    
    
    
    
    
    
    width : 0, 
    
    
    
    
    
    
    
    height : 0, 
    
    
    
    
    
    id : '910e751a-d390-49c5-8677-4e8e27859a01',
    
    
    
    
    
    
    
    ownerId : 'ffa5ade1-a644-4c46-8d1a-82a41e15b53f',
    
    
    
    
    
    
    
    
    createdDate : new Date(), 
    
    
    
    
    
    
    keyHash : 'null',
    
    
    
    
    
    
    
    lastAccessedById : '7e9cbbc3-2177-41f6-ab97-6384f2bc9e1c',
    
    
    
    
    
    
    
    
    lastAccessedDate : new Date(), 
    
    
    
    
    
    
    lastModifiedById : '649542fe-ced2-4054-87d4-ead2e4e40344',
    
    
    
    
    
    
    
    
    lastModifiedDate : new Date(), 
    
    
    
    
    
  };

  const handleSubmit = (values: FormikValues,
    { setSubmitting }: FormikHelpers<Chart>) => {
    setTimeout(() => {
      console.log(values);
      addChart(values);
      setSubmitting(false);
    }, 500);
  }

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >

        {({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
          <form onSubmit={handleSubmit} className="form">

                    <Accordion
                      defaultActiveKey="1"
                    >
                      <Accordion.Item eventKey="0">
                        <Accordion.Header><FaCogs size={36}/></Accordion.Header>
                        <Accordion.Body>
                          errors: {JSON.stringify(errors)}
                          <br />
                          touched: {JSON.stringify(touched)}
                          <br />
                          addChartResult: {JSON.stringify(addChartResult)}
                        </Accordion.Body>
                      </Accordion.Item>

                      <Accordion.Item eventKey="1">
                        <Accordion.Header><FaRegPlusSquare  size={36}/> Add New Chart</Accordion.Header>
                        <Accordion.Body>

        {/* MUSTACHE FORM FIELDS */}


        
            <label htmlFor="sheetId" className="nice-form-control">
              <b>Sheet Id: {touched.sheetId && !errors.sheetId && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* sheetId  TEXT FIELD */}
              <Field name="sheetId" type="text"
                className={errors.sheetId  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="sheetId" component="span" />
            </label>


        
            <label htmlFor="name" className="nice-form-control">
              <b>Name: {touched.name && !errors.name && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* name  TEXT FIELD */}
              <Field name="name" type="text"
                className={errors.name  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="name" component="span" />
            </label>


        
            <label htmlFor="chartType" className="nice-form-control">
              <b>Chart Type: {touched.chartType && !errors.chartType && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
                    {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="chartType"
                className={errors.chartType ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('chartType', true);
                  setFieldValue('chartType', e.target.value);
                }}
              >
                <option value="" label="Select Chart Type" />
                <ChartTypeLookup />
              </BSForm.Select>
              <ErrorMessage className='error' name="chartType" component="span" />
            </label>


        
            <label htmlFor="title" className="nice-form-control">
              <b>Title: {touched.title && !errors.title && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* title  TEXT FIELD */}
              <Field name="title" type="text"
                className={errors.title  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="title" component="span" />
            </label>


        
            <label htmlFor="axisLabelX" className="nice-form-control">
              <b>Axis Label X: {touched.axisLabelX && !errors.axisLabelX && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* axisLabelX  TEXT FIELD */}
              <Field name="axisLabelX" type="text"
                className={errors.axisLabelX  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="axisLabelX" component="span" />
            </label>


        
            <label htmlFor="axisLabelY" className="nice-form-control">
              <b>Axis Label Y: {touched.axisLabelY && !errors.axisLabelY && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* axisLabelY  TEXT FIELD */}
              <Field name="axisLabelY" type="text"
                className={errors.axisLabelY  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="axisLabelY" component="span" />
            </label>


        
            <label htmlFor="categoryRange" className="nice-form-control">
              <b>Category Range: {touched.categoryRange && !errors.categoryRange && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* categoryRange  TEXT FIELD */}
              <Field name="categoryRange" type="text"
                className={errors.categoryRange  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="categoryRange" component="span" />
            </label>


        
            <label htmlFor="embedded" className="nice-form-control">
              <b>Embedded: {touched.embedded && !errors.embedded && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* CHECKBOX FIELD */}
              <BSForm.Check
                required
                id="embedded"
                name="embedded"
                onChange={e => {
                  setFieldTouched('embedded', true);
                  setFieldValue('embedded', e.target.checked);
                }}
                isInvalid={!!errors.embedded }                  
                className={errors.embedded  ? 'error ' : ''} />
              <ErrorMessage className='error' name="embedded" component="span" />
            </label>


        
            <label htmlFor="anchorCell" className="nice-form-control">
              <b>Anchor Cell: {touched.anchorCell && !errors.anchorCell && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* anchorCell  TEXT FIELD */}
              <Field name="anchorCell" type="text"
                className={errors.anchorCell  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="anchorCell" component="span" />
            </label>


        
            <label htmlFor="anchorOffsetX" className="nice-form-control">
              <b>Anchor Offset X: {touched.anchorOffsetX && !errors.anchorOffsetX && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
          {/*anchorOffsetX INTEGER FIELD */}
              <Field name="anchorOffsetX" type="text"
                className={errors.anchorOffsetX  ? 'form-control field-error' : ' nice-form-control form-control'} />
          
              
                        <ErrorMessage className='error' name="anchorOffsetX" component="span" />
            </label>


        
            <label htmlFor="anchorOffsetY" className="nice-form-control">
              <b>Anchor Offset Y: {touched.anchorOffsetY && !errors.anchorOffsetY && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
          {/*anchorOffsetY INTEGER FIELD */}
              <Field name="anchorOffsetY" type="text"
                className={errors.anchorOffsetY  ? 'form-control field-error' : ' nice-form-control form-control'} />
          
              
                        <ErrorMessage className='error' name="anchorOffsetY" component="span" />
            </label>


        
            <label htmlFor="width" className="nice-form-control">
              <b>Width: {touched.width && !errors.width && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
          {/*width INTEGER FIELD */}
              <Field name="width" type="text"
                className={errors.width  ? 'form-control field-error' : ' nice-form-control form-control'} />
          
              
                        <ErrorMessage className='error' name="width" component="span" />
            </label>


        
            <label htmlFor="height" className="nice-form-control">
              <b>Height: {touched.height && !errors.height && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
          {/*height INTEGER FIELD */}
              <Field name="height" type="text"
                className={errors.height  ? 'form-control field-error' : ' nice-form-control form-control'} />
          
              
                        <ErrorMessage className='error' name="height" component="span" />
            </label>


        
            <label htmlFor="id" className="nice-form-control">
              <b>Id: {touched.id && !errors.id && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* id  TEXT FIELD */}
              <Field name="id" type="text"
                className={errors.id  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="id" component="span" />
            </label>


        
            <label htmlFor="ownerId" className="nice-form-control">
              <b>Owner Id: {touched.ownerId && !errors.ownerId && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* ownerId  TEXT FIELD */}
              <Field name="ownerId" type="text"
                className={errors.ownerId  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="ownerId" component="span" />
            </label>


        
            <label htmlFor="createdDate" className="nice-form-control">
              <b>Created Date: {touched.createdDate && !errors.createdDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*createdDate DATE FIELD */}
              <Field name="createdDate" type="date"
                className={errors.createdDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="createdDate" component="span" />
            </label>


        
            <label htmlFor="keyHash" className="nice-form-control">
              <b>Key Hash: {touched.keyHash && !errors.keyHash && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* keyHash  TEXT FIELD */}
              <Field name="keyHash" type="text"
                className={errors.keyHash  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="keyHash" component="span" />
            </label>


        
            <label htmlFor="lastAccessedById" className="nice-form-control">
              <b>Last Accessed By Id: {touched.lastAccessedById && !errors.lastAccessedById && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* lastAccessedById  TEXT FIELD */}
              <Field name="lastAccessedById" type="text"
                className={errors.lastAccessedById  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="lastAccessedById" component="span" />
            </label>


        
            <label htmlFor="lastAccessedDate" className="nice-form-control">
              <b>Last Accessed Date: {touched.lastAccessedDate && !errors.lastAccessedDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*lastAccessedDate DATE FIELD */}
              <Field name="lastAccessedDate" type="date"
                className={errors.lastAccessedDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="lastAccessedDate" component="span" />
            </label>


        
            <label htmlFor="lastModifiedById" className="nice-form-control">
              <b>Last Modified By Id: {touched.lastModifiedById && !errors.lastModifiedById && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* lastModifiedById  TEXT FIELD */}
              <Field name="lastModifiedById" type="text"
                className={errors.lastModifiedById  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="lastModifiedById" component="span" />
            </label>


        
            <label htmlFor="lastModifiedDate" className="nice-form-control">
              <b>Last Modified Date: {touched.lastModifiedDate && !errors.lastModifiedDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*lastModifiedDate DATE FIELD */}
              <Field name="lastModifiedDate" type="date"
                className={errors.lastModifiedDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="lastModifiedDate" component="span" />
            </label>

 
<br /><br />

                    <CoolButton
                      variant={(touched && isValid) ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                      type="submit"
                      onClick={() => { }}
                    >
                      {isSubmitting && (
                        <Spinner
                          style={ { float: "left" } }
                          as="span"
                          animation="grow"
                          variant="light"
                          aria-hidden="true"
                        />
                      )}
                      <FaCheckCircle size={30} /> Create New Chart
                    </CoolButton>


                        </Accordion.Body>
                      </Accordion.Item>
                    </Accordion>

          </form>
        )}
    </Formik>
    </div >
  );
};

/*

lowercase charttypelookup
uppercase CHARTTYPELOOKUP
snakecase chart_type_lookup
pascalcase ChartTypeLookup
camelcase chartTypeLookup
kebabcase chart-type-lookup


*/

const ChartTypeLookup = () => { 
  return(
  <>
    
    <option value='Area' label='Area' />
    
    
    <option value='Bar' label='Bar' />
    
    
    <option value='Column' label='Column' />
    
    
    <option value='Line' label='Line' />
    
    
    <option value='Pie' label='Pie' />
    
    
    <option value='Scatter' label='Scatter' />
    
    
    <option value='Radar' label='Radar' />
    
    
    <option value='Doughnut' label='Doughnut' />
    
    
    <option value='Stock' label='Stock' />
    
  </>
  )
};






export default ChartForm;
