import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React from 'react';
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from 'react-bootstrap';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '../../../../components/CoolButton';
import * as Yup from 'yup';
import { Level, LevelColorEnum, LevelLevelTypeEnum,  } from '../../../model';
import { useAddLevelMutation } from '../../services/LevelService';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi

Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** 7.5.0
**GENERATED DATE:** 2025-01-03T16:22:47.869548-08:00[America/Los_Angeles]
**GENERATOR CLASS:** org.openapitools.codegen.languages.TypeScriptReduxQueryClientCodegen

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Level
*/

{/* ENUMS FOR FORM VALIDATIONS */}

    

const ColorValidation = () => { 
  return(
    [
      'BLACK', 'CAMO-AIRFORCE', 'CAMO-MARINE', 'CAMO-NAVY', 'CAMO-ARMY', 'GRAY', 'OLIVE', 'SILVER', 'GOLD', 'EXOTIC', 
    ]
  )
};

const LevelTypeValidation = () => { 
  return(
    [
      'MAP', 'ACHIEVEMENT', 'BATTLE', 'CINEMATIC', 
    ]
  )
};



{/* MUSTACHE FORM VALIDATIONS */}
const validationSchema = Yup.object().shape({

     name: Yup.string()
    
    
    
    
    ,
     level: Yup.number()
    
    
    
    
    ,
     scoreMultiplier: Yup.number()
    
    
    
    
    ,
     color: Yup.string().oneOf(ColorValidation(), 'Invalid value selected for color')
    
    
    
    
    ,
     levelType: Yup.string().oneOf(LevelTypeValidation(), 'Invalid value selected for levelType')
    
    
    
    
    ,
     id: Yup.string()
    
    
    
    
    ,
     ownerId: Yup.string()
    
    
    
    
    ,
     createdDate: Yup.date()
    
    
    
    
    ,
     keyHash: Yup.string()
    
    
    
    
    ,
     lastAccessedById: Yup.string()
    
    
    
    
    ,
     lastAccessedDate: Yup.date()
    
    
    
    
    ,
     lastModifiedById: Yup.string()
    
    
    
    
    ,
     lastModifiedDate: Yup.date()
    
    
    
    
    ,

});

const LevelForm: React.FC = () => {
  const [addLevel, addLevelResult] = useAddLevelMutation();

  const initialValues: Level = {
    
    
    name : 'null',
    
    
    
    
    
    
    
    
    
    level : 0, 
    
    
    
    
    
    
    
    scoreMultiplier : 0, 
    
    
    
        color :   LevelColorEnum[Object.keys(LevelColorEnum)[0]], 
        levelType :   LevelLevelTypeEnum[Object.keys(LevelLevelTypeEnum)[0]], 
    
    
    id : 'ffef594f-a40e-43c3-a913-fb4294f8a897',
    
    
    
    
    
    
    
    ownerId : 'fdbb825b-0db1-43bf-ab1f-485c482df862',
    
    
    
    
    
    
    
    
    createdDate : new Date(), 
    
    
    
    
    
    
    keyHash : 'null',
    
    
    
    
    
    
    
    lastAccessedById : 'e13d1a53-bdf7-4ef8-9ce5-5d2c4bad654f',
    
    
    
    
    
    
    
    
    lastAccessedDate : new Date(), 
    
    
    
    
    
    
    lastModifiedById : '941a62d0-68f0-42f6-a883-70bd5b776b58',
    
    
    
    
    
    
    
    
    lastModifiedDate : new Date(), 
    
    
    
    
    
  };

  const handleSubmit = (values: FormikValues,
    { setSubmitting }: FormikHelpers<Level>) => {
    setTimeout(() => {
      console.log(values);
      addLevel(values);
      setSubmitting(false);
    }, 500);
  }

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >

        {({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
          <form onSubmit={handleSubmit} className="form">

                    <Accordion
                      defaultActiveKey="1"
                    >
                      <Accordion.Item eventKey="0">
                        <Accordion.Header><FaCogs size={36}/></Accordion.Header>
                        <Accordion.Body>
                          errors: {JSON.stringify(errors)}
                          <br />
                          touched: {JSON.stringify(touched)}
                          <br />
                          addLevelResult: {JSON.stringify(addLevelResult)}
                        </Accordion.Body>
                      </Accordion.Item>

                      <Accordion.Item eventKey="1">
                        <Accordion.Header><FaRegPlusSquare  size={36}/> Add New Level</Accordion.Header>
                        <Accordion.Body>

        {/* MUSTACHE FORM FIELDS */}


        
            <label htmlFor="name" className="nice-form-control">
              <b>Name: {touched.name && !errors.name && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* name  TEXT FIELD */}
              <Field name="name" type="text"
                className={errors.name  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="name" component="span" />
            </label>


        
            <label htmlFor="level" className="nice-form-control">
              <b>Level: {touched.level && !errors.level && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
          {/*level INTEGER FIELD */}
              <Field name="level" type="text"
                className={errors.level  ? 'form-control field-error' : ' nice-form-control form-control'} />
          
              
                        <ErrorMessage className='error' name="level" component="span" />
            </label>


        
            <label htmlFor="scoreMultiplier" className="nice-form-control">
              <b>Score Multiplier: {touched.scoreMultiplier && !errors.scoreMultiplier && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
          {/*scoreMultiplier INTEGER FIELD */}
              <Field name="scoreMultiplier" type="text"
                className={errors.scoreMultiplier  ? 'form-control field-error' : ' nice-form-control form-control'} />
          
              
                        <ErrorMessage className='error' name="scoreMultiplier" component="span" />
            </label>


        
            <label htmlFor="color" className="nice-form-control">
              <b>Color: {touched.color && !errors.color && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
                    {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="color"
                className={errors.color ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('color', true);
                  setFieldValue('color', e.target.value);
                }}
              >
                <option value="" label="Select Color" />
                <ColorLookup />
              </BSForm.Select>
              <ErrorMessage className='error' name="color" component="span" />
            </label>


        
            <label htmlFor="levelType" className="nice-form-control">
              <b>Level Type: {touched.levelType && !errors.levelType && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
                    {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="levelType"
                className={errors.levelType ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('levelType', true);
                  setFieldValue('levelType', e.target.value);
                }}
              >
                <option value="" label="Select Level Type" />
                <LevelTypeLookup />
              </BSForm.Select>
              <ErrorMessage className='error' name="levelType" component="span" />
            </label>


        
            <label htmlFor="id" className="nice-form-control">
              <b>Id: {touched.id && !errors.id && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* id  TEXT FIELD */}
              <Field name="id" type="text"
                className={errors.id  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="id" component="span" />
            </label>


        
            <label htmlFor="ownerId" className="nice-form-control">
              <b>Owner Id: {touched.ownerId && !errors.ownerId && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* ownerId  TEXT FIELD */}
              <Field name="ownerId" type="text"
                className={errors.ownerId  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="ownerId" component="span" />
            </label>


        
            <label htmlFor="createdDate" className="nice-form-control">
              <b>Created Date: {touched.createdDate && !errors.createdDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*createdDate DATE FIELD */}
              <Field name="createdDate" type="date"
                className={errors.createdDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="createdDate" component="span" />
            </label>


        
            <label htmlFor="keyHash" className="nice-form-control">
              <b>Key Hash: {touched.keyHash && !errors.keyHash && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* keyHash  TEXT FIELD */}
              <Field name="keyHash" type="text"
                className={errors.keyHash  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="keyHash" component="span" />
            </label>


        
            <label htmlFor="lastAccessedById" className="nice-form-control">
              <b>Last Accessed By Id: {touched.lastAccessedById && !errors.lastAccessedById && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* lastAccessedById  TEXT FIELD */}
              <Field name="lastAccessedById" type="text"
                className={errors.lastAccessedById  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="lastAccessedById" component="span" />
            </label>


        
            <label htmlFor="lastAccessedDate" className="nice-form-control">
              <b>Last Accessed Date: {touched.lastAccessedDate && !errors.lastAccessedDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*lastAccessedDate DATE FIELD */}
              <Field name="lastAccessedDate" type="date"
                className={errors.lastAccessedDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="lastAccessedDate" component="span" />
            </label>


        
            <label htmlFor="lastModifiedById" className="nice-form-control">
              <b>Last Modified By Id: {touched.lastModifiedById && !errors.lastModifiedById && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/* lastModifiedById  TEXT FIELD */}
              <Field name="lastModifiedById" type="text"
                className={errors.lastModifiedById  ? 'form-control field-error' : ' nice-form-control form-control'} />    
                        <ErrorMessage className='error' name="lastModifiedById" component="span" />
            </label>


        
            <label htmlFor="lastModifiedDate" className="nice-form-control">
              <b>Last Modified Date: {touched.lastModifiedDate && !errors.lastModifiedDate && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              
              
          
          {/*lastModifiedDate DATE FIELD */}
              <Field name="lastModifiedDate" type="date"
                className={errors.lastModifiedDate  ? 'form-control field-error' : ' nice-form-control form-control'} />
                        <ErrorMessage className='error' name="lastModifiedDate" component="span" />
            </label>

 
<br /><br />

                    <CoolButton
                      variant={(touched && isValid) ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                      type="submit"
                      onClick={() => { }}
                    >
                      {isSubmitting && (
                        <Spinner
                          style={ { float: "left" } }
                          as="span"
                          animation="grow"
                          variant="light"
                          aria-hidden="true"
                        />
                      )}
                      <FaCheckCircle size={30} /> Create New Level
                    </CoolButton>


                        </Accordion.Body>
                      </Accordion.Item>
                    </Accordion>

          </form>
        )}
    </Formik>
    </div >
  );
};

/*

lowercase colorlookup
uppercase COLORLOOKUP
snakecase color_lookup
pascalcase ColorLookup
camelcase colorLookup
kebabcase color-lookup


*/

const ColorLookup = () => { 
  return(
  <>
    
    <option value='BLACK' label='Black' />
    
    
    <option value='CAMO-AIRFORCE' label='Camo Airforce' />
    
    
    <option value='CAMO-MARINE' label='Camo Marine' />
    
    
    <option value='CAMO-NAVY' label='Camo Navy' />
    
    
    <option value='CAMO-ARMY' label='Camo Army' />
    
    
    <option value='GRAY' label='Gray' />
    
    
    <option value='OLIVE' label='Olive' />
    
    
    <option value='SILVER' label='Silver' />
    
    
    <option value='GOLD' label='Gold' />
    
    
    <option value='EXOTIC' label='Exotic' />
    
  </>
  )
};



/*

lowercase leveltypelookup
uppercase LEVELTYPELOOKUP
snakecase level_type_lookup
pascalcase LevelTypeLookup
camelcase levelTypeLookup
kebabcase level-type-lookup


*/

const LevelTypeLookup = () => { 
  return(
  <>
    
    <option value='MAP' label='Map' />
    
    
    <option value='ACHIEVEMENT' label='Achievement' />
    
    
    <option value='BATTLE' label='Battle' />
    
    
    <option value='CINEMATIC' label='Cinematic' />
    
  </>
  )
};






export default LevelForm;
