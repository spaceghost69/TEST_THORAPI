
import { 
    getChartSeries, 
    postChartSeries,
    getChartSeriesList , 
    deleteChartSeries , 
    updateChartSeries 
} from '../../api';

import {

    ADD_CHARTSERIES_REQUEST,
    FETCH_CHARTSERIES_REQUEST,
    LIST_CHARTSERIES_REQUEST,
    UPDATE_CHARTSERIES_REQUEST,
    DELETE_CHARTSERIES_REQUEST,

    addChartSeriesFailure,
    addChartSeriesSuccess,

    fetchChartSeriesFailure,
    fetchChartSeriesSuccess,
    
    listChartSeriesFailure,
    listChartSeriesSuccess,

    updateChartSeriesFailure,
    updateChartSeriesSuccess,
    
    deleteChartSeriesFailure,
    deleteChartSeriesSuccess,
    
} from '../actions/ChartSeriesApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: ChartSeries
*/

export const ChartSeriesMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("ChartSeries MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_CHARTSERIES_REQUEST:
            try {
                const response = postChartSeries(action.payload);
                dispatch(addChartSeriesSuccess(response.body));
            } catch (error) {
                dispatch(addChartSeriesFailure(error.message));
            }
            break;

        case LIST_CHARTSERIES_REQUEST:
            try {
                const response = getChartSeriesList();
                dispatch(listChartSeriesSuccess(response.body));
            } catch (error) {
                dispatch(listChartSeriesFailure(error.message));
            }
            break;


        case FETCH_CHARTSERIES_REQUEST:
            try {
                const response = getChartSeries(action.id);
                dispatch(fetchChartSeriesSuccess(response.body));
            } catch (error) {
                dispatch(fetchChartSeriesFailure(error.message));
            }
            break;

        case UPDATE_CHARTSERIES_REQUEST:
            try {
                const { id, ChartSeries } = action.payload;
                const response = updateChartSeries(id);
                dispatch(updateChartSeriesSuccess(response.body));
            } catch (error) {
                dispatch(updateChartSeriesFailure(error.message));
            }
            break;

        case DELETE_CHARTSERIES_REQUEST:
            try {
                const { id, ChartSeries } = action.payload;
                const response = deleteChartSeries(id);
                dispatch(deleteChartSeriesSuccess(response.body));
            } catch (error) {
                dispatch(deleteChartSeriesFailure(error.message));
            }
            break;

        default:
            break;
    }
};

