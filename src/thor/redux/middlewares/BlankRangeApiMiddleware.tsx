
import { 
    getBlankRange, 
    postBlankRange,
    getBlankRangeList , 
    deleteBlankRange , 
    updateBlankRange 
} from '../../api';

import {

    ADD_BLANKRANGE_REQUEST,
    FETCH_BLANKRANGE_REQUEST,
    LIST_BLANKRANGE_REQUEST,
    UPDATE_BLANKRANGE_REQUEST,
    DELETE_BLANKRANGE_REQUEST,

    addBlankRangeFailure,
    addBlankRangeSuccess,

    fetchBlankRangeFailure,
    fetchBlankRangeSuccess,
    
    listBlankRangeFailure,
    listBlankRangeSuccess,

    updateBlankRangeFailure,
    updateBlankRangeSuccess,
    
    deleteBlankRangeFailure,
    deleteBlankRangeSuccess,
    
} from '../actions/BlankRangeApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: BlankRange
*/

export const BlankRangeMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("BlankRange MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_BLANKRANGE_REQUEST:
            try {
                const response = postBlankRange(action.payload);
                dispatch(addBlankRangeSuccess(response.body));
            } catch (error) {
                dispatch(addBlankRangeFailure(error.message));
            }
            break;

        case LIST_BLANKRANGE_REQUEST:
            try {
                const response = getBlankRangeList();
                dispatch(listBlankRangeSuccess(response.body));
            } catch (error) {
                dispatch(listBlankRangeFailure(error.message));
            }
            break;


        case FETCH_BLANKRANGE_REQUEST:
            try {
                const response = getBlankRange(action.id);
                dispatch(fetchBlankRangeSuccess(response.body));
            } catch (error) {
                dispatch(fetchBlankRangeFailure(error.message));
            }
            break;

        case UPDATE_BLANKRANGE_REQUEST:
            try {
                const { id, BlankRange } = action.payload;
                const response = updateBlankRange(id);
                dispatch(updateBlankRangeSuccess(response.body));
            } catch (error) {
                dispatch(updateBlankRangeFailure(error.message));
            }
            break;

        case DELETE_BLANKRANGE_REQUEST:
            try {
                const { id, BlankRange } = action.payload;
                const response = deleteBlankRange(id);
                dispatch(deleteBlankRangeSuccess(response.body));
            } catch (error) {
                dispatch(deleteBlankRangeFailure(error.message));
            }
            break;

        default:
            break;
    }
};

