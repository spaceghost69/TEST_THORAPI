
import { 
    getMergeRange, 
    postMergeRange,
    getMergeRangeList , 
    deleteMergeRange , 
    updateMergeRange 
} from '../../api';

import {

    ADD_MERGERANGE_REQUEST,
    FETCH_MERGERANGE_REQUEST,
    LIST_MERGERANGE_REQUEST,
    UPDATE_MERGERANGE_REQUEST,
    DELETE_MERGERANGE_REQUEST,

    addMergeRangeFailure,
    addMergeRangeSuccess,

    fetchMergeRangeFailure,
    fetchMergeRangeSuccess,
    
    listMergeRangeFailure,
    listMergeRangeSuccess,

    updateMergeRangeFailure,
    updateMergeRangeSuccess,
    
    deleteMergeRangeFailure,
    deleteMergeRangeSuccess,
    
} from '../actions/MergeRangeApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: MergeRange
*/

export const MergeRangeMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("MergeRange MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_MERGERANGE_REQUEST:
            try {
                const response = postMergeRange(action.payload);
                dispatch(addMergeRangeSuccess(response.body));
            } catch (error) {
                dispatch(addMergeRangeFailure(error.message));
            }
            break;

        case LIST_MERGERANGE_REQUEST:
            try {
                const response = getMergeRangeList();
                dispatch(listMergeRangeSuccess(response.body));
            } catch (error) {
                dispatch(listMergeRangeFailure(error.message));
            }
            break;


        case FETCH_MERGERANGE_REQUEST:
            try {
                const response = getMergeRange(action.id);
                dispatch(fetchMergeRangeSuccess(response.body));
            } catch (error) {
                dispatch(fetchMergeRangeFailure(error.message));
            }
            break;

        case UPDATE_MERGERANGE_REQUEST:
            try {
                const { id, MergeRange } = action.payload;
                const response = updateMergeRange(id);
                dispatch(updateMergeRangeSuccess(response.body));
            } catch (error) {
                dispatch(updateMergeRangeFailure(error.message));
            }
            break;

        case DELETE_MERGERANGE_REQUEST:
            try {
                const { id, MergeRange } = action.payload;
                const response = deleteMergeRange(id);
                dispatch(deleteMergeRangeSuccess(response.body));
            } catch (error) {
                dispatch(deleteMergeRangeFailure(error.message));
            }
            break;

        default:
            break;
    }
};

