
import { 
    getPtg, 
    postPtg,
    getPtgList , 
    deletePtg , 
    updatePtg 
} from '../../api';

import {

    ADD_PTG_REQUEST,
    FETCH_PTG_REQUEST,
    LIST_PTG_REQUEST,
    UPDATE_PTG_REQUEST,
    DELETE_PTG_REQUEST,

    addPtgFailure,
    addPtgSuccess,

    fetchPtgFailure,
    fetchPtgSuccess,
    
    listPtgFailure,
    listPtgSuccess,

    updatePtgFailure,
    updatePtgSuccess,
    
    deletePtgFailure,
    deletePtgSuccess,
    
} from '../actions/PtgApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Ptg
*/

export const PtgMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Ptg MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_PTG_REQUEST:
            try {
                const response = postPtg(action.payload);
                dispatch(addPtgSuccess(response.body));
            } catch (error) {
                dispatch(addPtgFailure(error.message));
            }
            break;

        case LIST_PTG_REQUEST:
            try {
                const response = getPtgList();
                dispatch(listPtgSuccess(response.body));
            } catch (error) {
                dispatch(listPtgFailure(error.message));
            }
            break;


        case FETCH_PTG_REQUEST:
            try {
                const response = getPtg(action.id);
                dispatch(fetchPtgSuccess(response.body));
            } catch (error) {
                dispatch(fetchPtgFailure(error.message));
            }
            break;

        case UPDATE_PTG_REQUEST:
            try {
                const { id, Ptg } = action.payload;
                const response = updatePtg(id);
                dispatch(updatePtgSuccess(response.body));
            } catch (error) {
                dispatch(updatePtgFailure(error.message));
            }
            break;

        case DELETE_PTG_REQUEST:
            try {
                const { id, Ptg } = action.payload;
                const response = deletePtg(id);
                dispatch(deletePtgSuccess(response.body));
            } catch (error) {
                dispatch(deletePtgFailure(error.message));
            }
            break;

        default:
            break;
    }
};

