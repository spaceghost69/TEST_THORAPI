
import { 
    getRole, 
    postRole,
    getRoleList , 
    deleteRole , 
    updateRole 
} from '../../api';

import {

    ADD_ROLE_REQUEST,
    FETCH_ROLE_REQUEST,
    LIST_ROLE_REQUEST,
    UPDATE_ROLE_REQUEST,
    DELETE_ROLE_REQUEST,

    addRoleFailure,
    addRoleSuccess,

    fetchRoleFailure,
    fetchRoleSuccess,
    
    listRoleFailure,
    listRoleSuccess,

    updateRoleFailure,
    updateRoleSuccess,
    
    deleteRoleFailure,
    deleteRoleSuccess,
    
} from '../actions/RoleApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Role
*/

export const RoleMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Role MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_ROLE_REQUEST:
            try {
                const response = postRole(action.payload);
                dispatch(addRoleSuccess(response.body));
            } catch (error) {
                dispatch(addRoleFailure(error.message));
            }
            break;

        case LIST_ROLE_REQUEST:
            try {
                const response = getRoleList();
                dispatch(listRoleSuccess(response.body));
            } catch (error) {
                dispatch(listRoleFailure(error.message));
            }
            break;


        case FETCH_ROLE_REQUEST:
            try {
                const response = getRole(action.id);
                dispatch(fetchRoleSuccess(response.body));
            } catch (error) {
                dispatch(fetchRoleFailure(error.message));
            }
            break;

        case UPDATE_ROLE_REQUEST:
            try {
                const { id, Role } = action.payload;
                const response = updateRole(id);
                dispatch(updateRoleSuccess(response.body));
            } catch (error) {
                dispatch(updateRoleFailure(error.message));
            }
            break;

        case DELETE_ROLE_REQUEST:
            try {
                const { id, Role } = action.payload;
                const response = deleteRole(id);
                dispatch(deleteRoleSuccess(response.body));
            } catch (error) {
                dispatch(deleteRoleFailure(error.message));
            }
            break;

        default:
            break;
    }
};

