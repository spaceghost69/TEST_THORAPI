
import { 
    getBuild, 
    postBuild,
    getBuildList , 
    deleteBuild , 
    updateBuild 
} from '../../api';

import {

    ADD_BUILD_REQUEST,
    FETCH_BUILD_REQUEST,
    LIST_BUILD_REQUEST,
    UPDATE_BUILD_REQUEST,
    DELETE_BUILD_REQUEST,

    addBuildFailure,
    addBuildSuccess,

    fetchBuildFailure,
    fetchBuildSuccess,
    
    listBuildFailure,
    listBuildSuccess,

    updateBuildFailure,
    updateBuildSuccess,
    
    deleteBuildFailure,
    deleteBuildSuccess,
    
} from '../actions/BuildApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Build
*/

export const BuildMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Build MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_BUILD_REQUEST:
            try {
                const response = postBuild(action.payload);
                dispatch(addBuildSuccess(response.body));
            } catch (error) {
                dispatch(addBuildFailure(error.message));
            }
            break;

        case LIST_BUILD_REQUEST:
            try {
                const response = getBuildList();
                dispatch(listBuildSuccess(response.body));
            } catch (error) {
                dispatch(listBuildFailure(error.message));
            }
            break;


        case FETCH_BUILD_REQUEST:
            try {
                const response = getBuild(action.id);
                dispatch(fetchBuildSuccess(response.body));
            } catch (error) {
                dispatch(fetchBuildFailure(error.message));
            }
            break;

        case UPDATE_BUILD_REQUEST:
            try {
                const { id, Build } = action.payload;
                const response = updateBuild(id);
                dispatch(updateBuildSuccess(response.body));
            } catch (error) {
                dispatch(updateBuildFailure(error.message));
            }
            break;

        case DELETE_BUILD_REQUEST:
            try {
                const { id, Build } = action.payload;
                const response = deleteBuild(id);
                dispatch(deleteBuildSuccess(response.body));
            } catch (error) {
                dispatch(deleteBuildFailure(error.message));
            }
            break;

        default:
            break;
    }
};

