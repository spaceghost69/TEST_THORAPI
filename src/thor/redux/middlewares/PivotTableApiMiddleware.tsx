
import { 
    getPivotTable, 
    postPivotTable,
    getPivotTableList , 
    deletePivotTable , 
    updatePivotTable 
} from '../../api';

import {

    ADD_PIVOTTABLE_REQUEST,
    FETCH_PIVOTTABLE_REQUEST,
    LIST_PIVOTTABLE_REQUEST,
    UPDATE_PIVOTTABLE_REQUEST,
    DELETE_PIVOTTABLE_REQUEST,

    addPivotTableFailure,
    addPivotTableSuccess,

    fetchPivotTableFailure,
    fetchPivotTableSuccess,
    
    listPivotTableFailure,
    listPivotTableSuccess,

    updatePivotTableFailure,
    updatePivotTableSuccess,
    
    deletePivotTableFailure,
    deletePivotTableSuccess,
    
} from '../actions/PivotTableApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: PivotTable
*/

export const PivotTableMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("PivotTable MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_PIVOTTABLE_REQUEST:
            try {
                const response = postPivotTable(action.payload);
                dispatch(addPivotTableSuccess(response.body));
            } catch (error) {
                dispatch(addPivotTableFailure(error.message));
            }
            break;

        case LIST_PIVOTTABLE_REQUEST:
            try {
                const response = getPivotTableList();
                dispatch(listPivotTableSuccess(response.body));
            } catch (error) {
                dispatch(listPivotTableFailure(error.message));
            }
            break;


        case FETCH_PIVOTTABLE_REQUEST:
            try {
                const response = getPivotTable(action.id);
                dispatch(fetchPivotTableSuccess(response.body));
            } catch (error) {
                dispatch(fetchPivotTableFailure(error.message));
            }
            break;

        case UPDATE_PIVOTTABLE_REQUEST:
            try {
                const { id, PivotTable } = action.payload;
                const response = updatePivotTable(id);
                dispatch(updatePivotTableSuccess(response.body));
            } catch (error) {
                dispatch(updatePivotTableFailure(error.message));
            }
            break;

        case DELETE_PIVOTTABLE_REQUEST:
            try {
                const { id, PivotTable } = action.payload;
                const response = deletePivotTable(id);
                dispatch(deletePivotTableSuccess(response.body));
            } catch (error) {
                dispatch(deletePivotTableFailure(error.message));
            }
            break;

        default:
            break;
    }
};

