
import { 
    getGame, 
    postGame,
    getGameList , 
    deleteGame , 
    updateGame 
} from '../../api';

import {

    ADD_GAME_REQUEST,
    FETCH_GAME_REQUEST,
    LIST_GAME_REQUEST,
    UPDATE_GAME_REQUEST,
    DELETE_GAME_REQUEST,

    addGameFailure,
    addGameSuccess,

    fetchGameFailure,
    fetchGameSuccess,
    
    listGameFailure,
    listGameSuccess,

    updateGameFailure,
    updateGameSuccess,
    
    deleteGameFailure,
    deleteGameSuccess,
    
} from '../actions/GameApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Game
*/

export const GameMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Game MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_GAME_REQUEST:
            try {
                const response = postGame(action.payload);
                dispatch(addGameSuccess(response.body));
            } catch (error) {
                dispatch(addGameFailure(error.message));
            }
            break;

        case LIST_GAME_REQUEST:
            try {
                const response = getGameList();
                dispatch(listGameSuccess(response.body));
            } catch (error) {
                dispatch(listGameFailure(error.message));
            }
            break;


        case FETCH_GAME_REQUEST:
            try {
                const response = getGame(action.id);
                dispatch(fetchGameSuccess(response.body));
            } catch (error) {
                dispatch(fetchGameFailure(error.message));
            }
            break;

        case UPDATE_GAME_REQUEST:
            try {
                const { id, Game } = action.payload;
                const response = updateGame(id);
                dispatch(updateGameSuccess(response.body));
            } catch (error) {
                dispatch(updateGameFailure(error.message));
            }
            break;

        case DELETE_GAME_REQUEST:
            try {
                const { id, Game } = action.payload;
                const response = deleteGame(id);
                dispatch(deleteGameSuccess(response.body));
            } catch (error) {
                dispatch(deleteGameFailure(error.message));
            }
            break;

        default:
            break;
    }
};

