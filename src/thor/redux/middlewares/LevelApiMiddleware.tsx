
import { 
    getLevel, 
    postLevel,
    getLevelList , 
    deleteLevel , 
    updateLevel 
} from '../../api';

import {

    ADD_LEVEL_REQUEST,
    FETCH_LEVEL_REQUEST,
    LIST_LEVEL_REQUEST,
    UPDATE_LEVEL_REQUEST,
    DELETE_LEVEL_REQUEST,

    addLevelFailure,
    addLevelSuccess,

    fetchLevelFailure,
    fetchLevelSuccess,
    
    listLevelFailure,
    listLevelSuccess,

    updateLevelFailure,
    updateLevelSuccess,
    
    deleteLevelFailure,
    deleteLevelSuccess,
    
} from '../actions/LevelApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Level
*/

export const LevelMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Level MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_LEVEL_REQUEST:
            try {
                const response = postLevel(action.payload);
                dispatch(addLevelSuccess(response.body));
            } catch (error) {
                dispatch(addLevelFailure(error.message));
            }
            break;

        case LIST_LEVEL_REQUEST:
            try {
                const response = getLevelList();
                dispatch(listLevelSuccess(response.body));
            } catch (error) {
                dispatch(listLevelFailure(error.message));
            }
            break;


        case FETCH_LEVEL_REQUEST:
            try {
                const response = getLevel(action.id);
                dispatch(fetchLevelSuccess(response.body));
            } catch (error) {
                dispatch(fetchLevelFailure(error.message));
            }
            break;

        case UPDATE_LEVEL_REQUEST:
            try {
                const { id, Level } = action.payload;
                const response = updateLevel(id);
                dispatch(updateLevelSuccess(response.body));
            } catch (error) {
                dispatch(updateLevelFailure(error.message));
            }
            break;

        case DELETE_LEVEL_REQUEST:
            try {
                const { id, Level } = action.payload;
                const response = deleteLevel(id);
                dispatch(deleteLevelSuccess(response.body));
            } catch (error) {
                dispatch(deleteLevelFailure(error.message));
            }
            break;

        default:
            break;
    }
};

