
import { 
    getGoal, 
    postGoal,
    getGoalList , 
    deleteGoal , 
    updateGoal 
} from '../../api';

import {

    ADD_GOAL_REQUEST,
    FETCH_GOAL_REQUEST,
    LIST_GOAL_REQUEST,
    UPDATE_GOAL_REQUEST,
    DELETE_GOAL_REQUEST,

    addGoalFailure,
    addGoalSuccess,

    fetchGoalFailure,
    fetchGoalSuccess,
    
    listGoalFailure,
    listGoalSuccess,

    updateGoalFailure,
    updateGoalSuccess,
    
    deleteGoalFailure,
    deleteGoalSuccess,
    
} from '../actions/GoalApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Goal
*/

export const GoalMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Goal MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_GOAL_REQUEST:
            try {
                const response = postGoal(action.payload);
                dispatch(addGoalSuccess(response.body));
            } catch (error) {
                dispatch(addGoalFailure(error.message));
            }
            break;

        case LIST_GOAL_REQUEST:
            try {
                const response = getGoalList();
                dispatch(listGoalSuccess(response.body));
            } catch (error) {
                dispatch(listGoalFailure(error.message));
            }
            break;


        case FETCH_GOAL_REQUEST:
            try {
                const response = getGoal(action.id);
                dispatch(fetchGoalSuccess(response.body));
            } catch (error) {
                dispatch(fetchGoalFailure(error.message));
            }
            break;

        case UPDATE_GOAL_REQUEST:
            try {
                const { id, Goal } = action.payload;
                const response = updateGoal(id);
                dispatch(updateGoalSuccess(response.body));
            } catch (error) {
                dispatch(updateGoalFailure(error.message));
            }
            break;

        case DELETE_GOAL_REQUEST:
            try {
                const { id, Goal } = action.payload;
                const response = deleteGoal(id);
                dispatch(deleteGoalSuccess(response.body));
            } catch (error) {
                dispatch(deleteGoalFailure(error.message));
            }
            break;

        default:
            break;
    }
};

