
import { 
    getCell, 
    postCell,
    getCellList , 
    deleteCell , 
    updateCell 
} from '../../api';

import {

    ADD_CELL_REQUEST,
    FETCH_CELL_REQUEST,
    LIST_CELL_REQUEST,
    UPDATE_CELL_REQUEST,
    DELETE_CELL_REQUEST,

    addCellFailure,
    addCellSuccess,

    fetchCellFailure,
    fetchCellSuccess,
    
    listCellFailure,
    listCellSuccess,

    updateCellFailure,
    updateCellSuccess,
    
    deleteCellFailure,
    deleteCellSuccess,
    
} from '../actions/CellApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Cell
*/

export const CellMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Cell MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_CELL_REQUEST:
            try {
                const response = postCell(action.payload);
                dispatch(addCellSuccess(response.body));
            } catch (error) {
                dispatch(addCellFailure(error.message));
            }
            break;

        case LIST_CELL_REQUEST:
            try {
                const response = getCellList();
                dispatch(listCellSuccess(response.body));
            } catch (error) {
                dispatch(listCellFailure(error.message));
            }
            break;


        case FETCH_CELL_REQUEST:
            try {
                const response = getCell(action.id);
                dispatch(fetchCellSuccess(response.body));
            } catch (error) {
                dispatch(fetchCellFailure(error.message));
            }
            break;

        case UPDATE_CELL_REQUEST:
            try {
                const { id, Cell } = action.payload;
                const response = updateCell(id);
                dispatch(updateCellSuccess(response.body));
            } catch (error) {
                dispatch(updateCellFailure(error.message));
            }
            break;

        case DELETE_CELL_REQUEST:
            try {
                const { id, Cell } = action.payload;
                const response = deleteCell(id);
                dispatch(deleteCellSuccess(response.body));
            } catch (error) {
                dispatch(deleteCellFailure(error.message));
            }
            break;

        default:
            break;
    }
};

