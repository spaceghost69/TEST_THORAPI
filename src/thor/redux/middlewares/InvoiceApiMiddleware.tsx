
import { 
    getInvoice, 
    postInvoice,
    getInvoiceList , 
    deleteInvoice , 
    updateInvoice 
} from '../../api';

import {

    ADD_INVOICE_REQUEST,
    FETCH_INVOICE_REQUEST,
    LIST_INVOICE_REQUEST,
    UPDATE_INVOICE_REQUEST,
    DELETE_INVOICE_REQUEST,

    addInvoiceFailure,
    addInvoiceSuccess,

    fetchInvoiceFailure,
    fetchInvoiceSuccess,
    
    listInvoiceFailure,
    listInvoiceSuccess,

    updateInvoiceFailure,
    updateInvoiceSuccess,
    
    deleteInvoiceFailure,
    deleteInvoiceSuccess,
    
} from '../actions/InvoiceApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by CARMINA GAMES ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Invoice
*/

export const InvoiceMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Invoice MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_INVOICE_REQUEST:
            try {
                const response = postInvoice(action.payload);
                dispatch(addInvoiceSuccess(response.body));
            } catch (error) {
                dispatch(addInvoiceFailure(error.message));
            }
            break;

        case LIST_INVOICE_REQUEST:
            try {
                const response = getInvoiceList();
                dispatch(listInvoiceSuccess(response.body));
            } catch (error) {
                dispatch(listInvoiceFailure(error.message));
            }
            break;


        case FETCH_INVOICE_REQUEST:
            try {
                const response = getInvoice(action.id);
                dispatch(fetchInvoiceSuccess(response.body));
            } catch (error) {
                dispatch(fetchInvoiceFailure(error.message));
            }
            break;

        case UPDATE_INVOICE_REQUEST:
            try {
                const { id, Invoice } = action.payload;
                const response = updateInvoice(id);
                dispatch(updateInvoiceSuccess(response.body));
            } catch (error) {
                dispatch(updateInvoiceFailure(error.message));
            }
            break;

        case DELETE_INVOICE_REQUEST:
            try {
                const { id, Invoice } = action.payload;
                const response = deleteInvoice(id);
                dispatch(deleteInvoiceSuccess(response.body));
            } catch (error) {
                dispatch(deleteInvoiceFailure(error.message));
            }
            break;

        default:
            break;
    }
};

