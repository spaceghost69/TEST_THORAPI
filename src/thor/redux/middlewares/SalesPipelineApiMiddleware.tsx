
import { 
    getSalesPipeline, 
    postSalesPipeline,
    getSalesPipelineList , 
    deleteSalesPipeline , 
    updateSalesPipeline 
} from '../../api';

import {

    ADD_SALESPIPELINE_REQUEST,
    FETCH_SALESPIPELINE_REQUEST,
    LIST_SALESPIPELINE_REQUEST,
    UPDATE_SALESPIPELINE_REQUEST,
    DELETE_SALESPIPELINE_REQUEST,

    addSalesPipelineFailure,
    addSalesPipelineSuccess,

    fetchSalesPipelineFailure,
    fetchSalesPipelineSuccess,
    
    listSalesPipelineFailure,
    listSalesPipelineSuccess,

    updateSalesPipelineFailure,
    updateSalesPipelineSuccess,
    
    deleteSalesPipelineFailure,
    deleteSalesPipelineSuccess,
    
} from '../actions/SalesPipelineApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: SalesPipeline
*/

export const SalesPipelineMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("SalesPipeline MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_SALESPIPELINE_REQUEST:
            try {
                const response = postSalesPipeline(action.payload);
                dispatch(addSalesPipelineSuccess(response.body));
            } catch (error) {
                dispatch(addSalesPipelineFailure(error.message));
            }
            break;

        case LIST_SALESPIPELINE_REQUEST:
            try {
                const response = getSalesPipelineList();
                dispatch(listSalesPipelineSuccess(response.body));
            } catch (error) {
                dispatch(listSalesPipelineFailure(error.message));
            }
            break;


        case FETCH_SALESPIPELINE_REQUEST:
            try {
                const response = getSalesPipeline(action.id);
                dispatch(fetchSalesPipelineSuccess(response.body));
            } catch (error) {
                dispatch(fetchSalesPipelineFailure(error.message));
            }
            break;

        case UPDATE_SALESPIPELINE_REQUEST:
            try {
                const { id, SalesPipeline } = action.payload;
                const response = updateSalesPipeline(id);
                dispatch(updateSalesPipelineSuccess(response.body));
            } catch (error) {
                dispatch(updateSalesPipelineFailure(error.message));
            }
            break;

        case DELETE_SALESPIPELINE_REQUEST:
            try {
                const { id, SalesPipeline } = action.payload;
                const response = deleteSalesPipeline(id);
                dispatch(deleteSalesPipelineSuccess(response.body));
            } catch (error) {
                dispatch(deleteSalesPipelineFailure(error.message));
            }
            break;

        default:
            break;
    }
};

