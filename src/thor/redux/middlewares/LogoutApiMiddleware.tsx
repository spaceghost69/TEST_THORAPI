
import { 
    getLogout, 
    postLogout,
    getLogoutList , 
    deleteLogout , 
    updateLogout 
} from '../../api';

import {

    ADD_LOGOUT_REQUEST,
    FETCH_LOGOUT_REQUEST,
    LIST_LOGOUT_REQUEST,
    UPDATE_LOGOUT_REQUEST,
    DELETE_LOGOUT_REQUEST,

    addLogoutFailure,
    addLogoutSuccess,

    fetchLogoutFailure,
    fetchLogoutSuccess,
    
    listLogoutFailure,
    listLogoutSuccess,

    updateLogoutFailure,
    updateLogoutSuccess,
    
    deleteLogoutFailure,
    deleteLogoutSuccess,
    
} from '../actions/LogoutApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: (7.5.0)

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: Logout
*/

export const LogoutMiddleware = ({ dispatch }) => (next) => async (action) => {
    console.log("Logout MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_LOGOUT_REQUEST:
            try {
                const response = postLogout(action.payload);
                dispatch(addLogoutSuccess(response.body));
            } catch (error) {
                dispatch(addLogoutFailure(error.message));
            }
            break;

        case LIST_LOGOUT_REQUEST:
            try {
                const response = getLogoutList();
                dispatch(listLogoutSuccess(response.body));
            } catch (error) {
                dispatch(listLogoutFailure(error.message));
            }
            break;


        case FETCH_LOGOUT_REQUEST:
            try {
                const response = getLogout(action.id);
                dispatch(fetchLogoutSuccess(response.body));
            } catch (error) {
                dispatch(fetchLogoutFailure(error.message));
            }
            break;

        case UPDATE_LOGOUT_REQUEST:
            try {
                const { id, Logout } = action.payload;
                const response = updateLogout(id);
                dispatch(updateLogoutSuccess(response.body));
            } catch (error) {
                dispatch(updateLogoutFailure(error.message));
            }
            break;

        case DELETE_LOGOUT_REQUEST:
            try {
                const { id, Logout } = action.payload;
                const response = deleteLogout(id);
                dispatch(deleteLogoutSuccess(response.body));
            } catch (error) {
                dispatch(deleteLogoutFailure(error.message));
            }
            break;

        default:
            break;
    }
};

