// tslint:disable
/**
 * Percival the Dragon Slayer CORE API
 * The API for accessing Percival the Dragon Slayer services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../src/runtime';
import {


    BlankRange,
    BlankRangeFromJSON,
    BlankRangeToJSON,
    Cell,
    CellFromJSON,
    CellToJSON,
    Chart,
    ChartFromJSON,
    ChartToJSON,
    MergeRange,
    MergeRangeFromJSON,
    MergeRangeToJSON,
    NamedRange,
    NamedRangeFromJSON,
    NamedRangeToJSON,
    PivotTable,
    PivotTableFromJSON,
    PivotTableToJSON,
    SheetColumn,
    SheetColumnFromJSON,
    SheetColumnToJSON,
    SheetRow,
    SheetRowFromJSON,
    SheetRowToJSON,
} from './';


// thorapi

/**
 * Sheetster sheet
 * @export
 * @interface Sheet
 */
export type Sheet  = {
    /**
     * the workbook containing this sheet
     * @type {string}
     * @memberof Sheet
     */
    workbookId?: string;
    /**
     * 
     * @type {string}
     * @memberof Sheet
     */
    name?: string;
    /**
     * 
     * @type {Array<Cell>}
     * @memberof Sheet
     */
    cells?: Array<Cell>;
    /**
     * 
     * @type {Array<SheetRow>}
     * @memberof Sheet
     */
    rows?: Array<SheetRow>;
    /**
     * 
     * @type {Array<SheetColumn>}
     * @memberof Sheet
     */
    cols?: Array<SheetColumn>;
    /**
     * 
     * @type {Array<NamedRange>}
     * @memberof Sheet
     */
    namedRanges?: Array<NamedRange>;
    /**
     * 
     * @type {Array<MergeRange>}
     * @memberof Sheet
     */
    mergeRanges?: Array<MergeRange>;
    /**
     * 
     * @type {Array<BlankRange>}
     * @memberof Sheet
     */
    blankRanges?: Array<BlankRange>;
    /**
     * 
     * @type {Array<Chart>}
     * @memberof Sheet
     */
    charts?: Array<Chart>;
    /**
     * 
     * @type {Array<PivotTable>}
     * @memberof Sheet
     */
    pivotTables?: Array<PivotTable>;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Sheet
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof Sheet
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Sheet
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof Sheet
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof Sheet
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof Sheet
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof Sheet
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof Sheet
     */
    lastModifiedDate?: Date;
}

export function SheetFromJSON(json: any): Sheet {
    return {
        'workbookId': !exists(json, 'workbookId') ? undefined : json['workbookId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'cells': !exists(json, 'cells') ? undefined : (json['cells'] as Array<any>).map(CellFromJSON),
        'rows': !exists(json, 'rows') ? undefined : (json['rows'] as Array<any>).map(SheetRowFromJSON),
        'cols': !exists(json, 'cols') ? undefined : (json['cols'] as Array<any>).map(SheetColumnFromJSON),
        'namedRanges': !exists(json, 'namedRanges') ? undefined : (json['namedRanges'] as Array<any>).map(NamedRangeFromJSON),
        'mergeRanges': !exists(json, 'mergeRanges') ? undefined : (json['mergeRanges'] as Array<any>).map(MergeRangeFromJSON),
        'blankRanges': !exists(json, 'blankRanges') ? undefined : (json['blankRanges'] as Array<any>).map(BlankRangeFromJSON),
        'charts': !exists(json, 'charts') ? undefined : (json['charts'] as Array<any>).map(ChartFromJSON),
        'pivotTables': !exists(json, 'pivotTables') ? undefined : (json['pivotTables'] as Array<any>).map(PivotTableFromJSON),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function SheetToJSON(value?: Sheet): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'workbookId': value.workbookId,
        'name': value.name,
        'cells': value.cells === undefined ? undefined : (value.cells as Array<any>).map(CellToJSON),
        'rows': value.rows === undefined ? undefined : (value.rows as Array<any>).map(SheetRowToJSON),
        'cols': value.cols === undefined ? undefined : (value.cols as Array<any>).map(SheetColumnToJSON),
        'namedRanges': value.namedRanges === undefined ? undefined : (value.namedRanges as Array<any>).map(NamedRangeToJSON),
        'mergeRanges': value.mergeRanges === undefined ? undefined : (value.mergeRanges as Array<any>).map(MergeRangeToJSON),
        'blankRanges': value.blankRanges === undefined ? undefined : (value.blankRanges as Array<any>).map(BlankRangeToJSON),
        'charts': value.charts === undefined ? undefined : (value.charts as Array<any>).map(ChartToJSON),
        'pivotTables': value.pivotTables === undefined ? undefined : (value.pivotTables as Array<any>).map(PivotTableToJSON),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}


