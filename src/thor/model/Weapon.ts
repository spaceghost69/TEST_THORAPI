// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../src/runtime';
import {


    GameWeaponIDX,
    GameWeaponIDXFromJSON,
    GameWeaponIDXToJSON,
} from './';


// thorapi

/**
 * DEMO weapon that can be used for the game
 * @export
 * @interface Weapon
 */
export type Weapon  = {
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    attackId?: string;
    /**
     * the name of the weapon
     * @type {string}
     * @memberof Weapon
     */
    name?: string;
    /**
     * 
     * @type {GameWeaponIDX}
     * @memberof Weapon
     */
    game?: GameWeaponIDX;
    /**
     * the the damage output level the weapon can have
     * @type {number}
     * @memberof Weapon
     */
    harmLevel?: number;
    /**
     * how much one of these weapons weighs in lbs
     * @type {number}
     * @memberof Weapon
     */
    weight?: number;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    color?: WeaponColorEnum;
    /**
     * the type of the weapon
     * @type {string}
     * @memberof Weapon
     */
    weaponType?: WeaponWeaponTypeEnum;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Weapon
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof Weapon
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Weapon
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof Weapon
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof Weapon
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof Weapon
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof Weapon
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof Weapon
     */
    lastModifiedDate?: Date;
}

export function WeaponFromJSON(json: any): Weapon {
    return {
        'attackId': !exists(json, 'attackId') ? undefined : json['attackId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'game': !exists(json, 'game') ? undefined : GameWeaponIDXFromJSON(json['game']),
        'harmLevel': !exists(json, 'harmLevel') ? undefined : json['harmLevel'],
        'weight': !exists(json, 'weight') ? undefined : json['weight'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'weaponType': !exists(json, 'weaponType') ? undefined : json['weaponType'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function WeaponToJSON(value?: Weapon): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'attackId': value.attackId,
        'name': value.name,
        'game': GameWeaponIDXToJSON(value.game),
        'harmLevel': value.harmLevel,
        'weight': value.weight,
        'color': value.color,
        'weaponType': value.weaponType,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum WeaponColorEnum {
    BLACK = 'black',
    CAMOAIRFORCE = 'camo-airforce',
    CAMOMARINE = 'camo-marine',
    CAMONAVY = 'camo-navy',
    CAMOARMY = 'camo-army',
    GRAY = 'gray',
    OLIVE = 'olive',
    SILVER = 'silver',
    GOLD = 'gold',
    EXOTIC = 'exotic'
}
/**
* @export
* @enum {string}
*/
export enum WeaponWeaponTypeEnum {
    BALLISTIC = 'ballistic',
    PROJECTILE = 'projectile',
    FIRE = 'fire',
    KINETIC = 'kinetic',
    NUCLEAR = 'nuclear',
    MUNITIONS = 'munitions',
    MELEE = 'melee',
    AIRCRAFT = 'aircraft',
    VESSELS = 'vessels',
    BOWS = 'bows',
    SLINGS = 'slings'
}


