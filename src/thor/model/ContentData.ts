// tslint:disable
/**
 * ValkyrAI CORE API
 * The API for accessing ValkyrAI services
 *
 * The version of the OpenAPI document: 0.9.25
 * Contact: info@valkyrlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../src/runtime';
import {


    ContentMediaLink,
    ContentMediaLinkFromJSON,
    ContentMediaLinkToJSON,
    Principal,
    PrincipalFromJSON,
    PrincipalToJSON,
} from './';


// thorapi

/**
 * TODO ContentData CLASS DESCRIPTION
 * @export
 * @interface ContentData
 */
export type ContentData  = {
    /**
     * 
     * @type {string}
     * @memberof ContentData
     */
    authorName?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentData
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentData
     */
    subtitle?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentData
     */
    contentUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentData
     */
    contentData?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentData
     */
    contentType?: ContentDataContentTypeEnum;
    /**
     * The large image (optional) for your content
     * @type {string}
     * @memberof ContentData
     */
    thumbnailImage?: string;
    /**
     * The large image (optional) for your content
     * @type {string}
     * @memberof ContentData
     */
    largeImage?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentData
     */
    category?: ContentDataCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof ContentData
     */
    status?: ContentDataStatusEnum;
    /**
     * the release date (used to automate publishing)
     * @type {Date}
     * @memberof ContentData
     */
    releaseDate?: Date;
    /**
     * media contained in or referenced by the content
     * @type {Array<ContentMediaLink>}
     * @memberof ContentData
     */
    contentMedia?: Array<ContentMediaLink>;
    /**
     * the author or attibuted entity
     * @type {string}
     * @memberof ContentData
     */
    principalId?: string;
    /**
     * 
     * @type {Principal}
     * @memberof ContentData
     */
    principal?: Principal;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof ContentData
     */
    id?: string;
    /**
     * UUID of owner of the object in the system
     * @type {string}
     * @memberof ContentData
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof ContentData
     */
    createdDate?: Date;
    /**
     * Data, including hash of the key(s) used to encrypt this record.
     * @type {string}
     * @memberof ContentData
     */
    keyHash?: string;
    /**
     * Last user to access object
     * @type {string}
     * @memberof ContentData
     */
    lastAccessedById?: string;
    /**
     * Timestamp of last access of object
     * @type {Date}
     * @memberof ContentData
     */
    lastAccessedDate?: Date;
    /**
     * Unique identifier for user who last modifed the object in the system
     * @type {string}
     * @memberof ContentData
     */
    lastModifiedById?: string;
    /**
     * Date of last object modification
     * @type {Date}
     * @memberof ContentData
     */
    lastModifiedDate?: Date;
}

export function ContentDataFromJSON(json: any): ContentData {
    return {
        'authorName': !exists(json, 'authorName') ? undefined : json['authorName'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'subtitle': !exists(json, 'subtitle') ? undefined : json['subtitle'],
        'contentUrl': !exists(json, 'contentUrl') ? undefined : json['contentUrl'],
        'contentData': !exists(json, 'contentData') ? undefined : json['contentData'],
        'contentType': !exists(json, 'contentType') ? undefined : json['contentType'],
        'thumbnailImage': !exists(json, 'thumbnailImage') ? undefined : json['thumbnailImage'],
        'largeImage': !exists(json, 'largeImage') ? undefined : json['largeImage'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'releaseDate': !exists(json, 'releaseDate') ? undefined : new Date(json['releaseDate']),
        'contentMedia': !exists(json, 'contentMedia') ? undefined : (json['contentMedia'] as Array<any>).map(ContentMediaLinkFromJSON),
        'principalId': !exists(json, 'principalId') ? undefined : json['principalId'],
        'principal': !exists(json, 'principal') ? undefined : PrincipalFromJSON(json['principal']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'keyHash': !exists(json, 'keyHash') ? undefined : json['keyHash'],
        'lastAccessedById': !exists(json, 'lastAccessedById') ? undefined : json['lastAccessedById'],
        'lastAccessedDate': !exists(json, 'lastAccessedDate') ? undefined : new Date(json['lastAccessedDate']),
        'lastModifiedById': !exists(json, 'lastModifiedById') ? undefined : json['lastModifiedById'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : new Date(json['lastModifiedDate']),
    };
}

export function ContentDataToJSON(value?: ContentData): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'authorName': value.authorName,
        'title': value.title,
        'subtitle': value.subtitle,
        'contentUrl': value.contentUrl,
        'contentData': value.contentData,
        'contentType': value.contentType,
        'thumbnailImage': value.thumbnailImage,
        'largeImage': value.largeImage,
        'category': value.category,
        'status': value.status,
        'releaseDate': value.releaseDate === undefined ? undefined : value.releaseDate.toISOString(),
        'contentMedia': value.contentMedia === undefined ? undefined : (value.contentMedia as Array<any>).map(ContentMediaLinkToJSON),
        'principalId': value.principalId,
        'principal': PrincipalToJSON(value.principal),
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'keyHash': value.keyHash,
        'lastAccessedById': value.lastAccessedById,
        'lastAccessedDate': value.lastAccessedDate === undefined ? undefined : value.lastAccessedDate.toISOString(),
        'lastModifiedById': value.lastModifiedById,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : value.lastModifiedDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum ContentDataContentTypeEnum {
    PLAINTEXT = 'plaintext',
    MARKDOWN = 'markdown',
    JSON = 'json',
    YAML = 'yaml',
    AUDIO = 'audio',
    VIDEO = 'video',
    URL = 'url',
    BINARY = 'binary'
}
/**
* @export
* @enum {string}
*/
export enum ContentDataCategoryEnum {
    CODEGEN = 'codegen',
    DOCS = 'docs',
    BLOG = 'blog',
    PRODUCT = 'product',
    SECURITY = 'security',
    EVENT = 'event'
}
/**
* @export
* @enum {string}
*/
export enum ContentDataStatusEnum {
    HOLDING = 'holding',
    EDITING = 'editing',
    PUBLISHED = 'published'
}


